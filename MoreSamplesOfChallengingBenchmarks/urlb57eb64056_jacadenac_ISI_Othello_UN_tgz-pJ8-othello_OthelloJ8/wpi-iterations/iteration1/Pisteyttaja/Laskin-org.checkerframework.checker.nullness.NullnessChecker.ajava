package Pisteyttaja;

import omatTietorakenteet.Hakemisto;

/**
 * Helpottaa et√§isyyksien laskemista, eli luo tulosvaraston Math.hypot funktiolle, jotta samoja laskuja ei tarvitse laskea moneen kertaan
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Laskin {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Hakemisto<Double, Double> varasto;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int luku;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Laskin() {
        this.varasto = new Hakemisto<Double, Double>();
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double hypot( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double y) {
        if (x == 0.0) {
            return y;
        } else if (x == 1.0) {
            luku = this.varasto.getAvainIndexAvaimella(y);
            if (luku >= 0) {
                return this.varasto.getArvoIndexilla(luku);
            } else {
                this.varasto.add(y, Math.hypot(x, y));
                return this.varasto.getArvo(y);
            }
        }
        //To change body of generated methods, choose Tools | Templates.
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
