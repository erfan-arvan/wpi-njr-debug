package jarjestelija;

//import Pisteyttaja.PaikanPisteet;
import sitsiplaseeraus.Paikka;
import sitsiplaseeraus.Sitsaaja;
import sitsiplaseeraus.Sitsit;
import sitsiplaseeraus.random.Random;

/**
 * Vaihtaa paikkojen sitsaajien päittäin.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Jarjestaja {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sitsit sitsit;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Paikka tokaPaikka;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Paikka tokaKohdePaikka;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Paikka ekaPaikka;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Paikka ekaKohdePaikka;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Sitsaaja ekaSitsaaja;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Sitsaaja ekaKohdeSitsaaja;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Sitsaaja tokaSitsaaja;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Sitsaaja tokaKohdeSitsaaja;

    /**
     * Alustaa olion käyttöön.
     * @param sitsit
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public Jarjestaja(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sitsit sitsit) {
        this.sitsit = sitsit;
    }

    /**
     * Vaihtaa kahden satunnaisen paikan sitsaajien paikkoja keskenään.
     * @return onnistuiko
     */
    @org.checkerframework.dataflow.qual.Impure
    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean vaihdaRandom() {
        ekaKohdePaikka = null;
        ekaPaikka = sitsit.getPaikka(Random.luo(sitsit.sitsaajienMaara() - 1));
        //        double pisteet = PaikanPisteet.tarkistaAvecJaPuoliso(ekaPaikka);
        //        if (pisteet > 0) {
        //            if (pisteet == 10000.1) {
        //                return this.vaihdaParinPaikka(1);
        //            } else if (pisteet == 10000.2) {
        //                return this.vaihdaParinPaikka(2);
        //            } else if (pisteet == 10000.3) {
        //                return this.vaihdaParinPaikka(3);
        //            }
        //            return false;
        //        } else {
        do {
            ekaKohdePaikka = sitsit.getPaikka(Random.luo(sitsit.sitsaajienMaara() - 1));
        } while (ekaPaikka.equals(ekaKohdePaikka));
        return this.vaihdaPaikat();
        //        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean vaihdaPaikat() {
        this.ekaSitsaaja = ekaPaikka.getSitsaaja();
        this.ekaKohdeSitsaaja = ekaKohdePaikka.getSitsaaja();
        ekaPaikka.setSitsaaja(ekaKohdeSitsaaja);
        ekaKohdePaikka.setSitsaaja(ekaSitsaaja);
        return true;
    }

    /**
     * Vaihtaa kahden ennaltamäärätyn paikkoja keskenään.
     * @param ekaPaikka
     * @param ekaKohdePaikka
     * @return true, jos onnistui.
     */
    @org.checkerframework.dataflow.qual.Impure
    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean vaihdaPaikat(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Paikka ekaPaikka, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Paikka ekaKohdePaikka) {
        this.ekaPaikka = ekaPaikka;
        this.ekaKohdePaikka = ekaKohdePaikka;
        return vaihdaPaikat();
    }

    @org.checkerframework.dataflow.qual.Impure
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean vaihdaParinPaikka(int millainenPari) {
        tokaPaikka = null;
        this.ekaSitsaaja = ekaPaikka.getSitsaaja();
        if (millainenPari == 1) {
            tokaPaikka = ekaPaikka.getMiehenAvecinPaikka();
        } else if (millainenPari == 2) {
            tokaPaikka = ekaPaikka.getNaisenAvecinPaikka();
        } else if (millainenPari == 3) {
            tokaPaikka = ekaPaikka.getPuolisonPaikka();
        }
        this.tokaSitsaaja = tokaPaikka.getSitsaaja();
        do {
            ekaKohdePaikka = sitsit.getPaikka(Random.luo(sitsit.sitsaajienMaara() - 1));
            tokaKohdePaikka = getTokaKohdePaikka(millainenPari);
        } while (tokaKohdePaikka == null || ekaPaikka.equals(ekaKohdePaikka) || tokaPaikka.equals(ekaKohdePaikka) || ekaPaikka.equals(tokaKohdePaikka) || tokaPaikka.equals(tokaKohdePaikka));
        this.ekaKohdeSitsaaja = this.ekaKohdePaikka.getSitsaaja();
        this.tokaKohdeSitsaaja = this.tokaKohdePaikka.getSitsaaja();
        this.ekaPaikka.setSitsaaja(ekaKohdeSitsaaja);
        this.tokaPaikka.setSitsaaja(tokaKohdeSitsaaja);
        this.ekaKohdePaikka.setSitsaaja(ekaSitsaaja);
        this.tokaKohdePaikka.setSitsaaja(tokaSitsaaja);
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Paikka getTokaKohdePaikka( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int millainenPari) {
        if (millainenPari == 1) {
            if (this.ekaKohdePaikka.getMiehenAvecinPaikka() != null)
                ;
            return this.ekaKohdePaikka.getMiehenAvecinPaikka();
        } else if (millainenPari == 2) {
            if (this.ekaKohdePaikka.getNaisenAvecinPaikka() != null)
                ;
            return this.ekaKohdePaikka.getNaisenAvecinPaikka();
        } else if (millainenPari == 3) {
            if (this.ekaKohdePaikka.getPuolisonPaikka() != null) {
                return this.ekaKohdePaikka.getPuolisonPaikka();
            }
        }
        return null;
    }
}
