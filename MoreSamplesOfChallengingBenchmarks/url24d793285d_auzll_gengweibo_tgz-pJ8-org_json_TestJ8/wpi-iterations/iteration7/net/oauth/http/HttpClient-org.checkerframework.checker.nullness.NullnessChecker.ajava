/*
 * Copyright 2008 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.oauth.http;

import java.io.IOException;
import java.util.Map;
import net.oauth.OAuthMessage;

/**
 * An HTTP client, which can send an HTTP request and receive the response.
 *
 * @author jkristian
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public interface HttpClient {

    /**
     * Send an HTTP request and return the response.
     *
     * @param httpParameters
     *            HTTP client parameters, as a map from parameter name to value.
     *            Parameter names are defined as constants below.
     */
    @org.checkerframework.dataflow.qual.Impure
    @org.checkerframework.checker.initialization.qual.UnderInitialization(net.oauth.client.URLConnectionResponse.class) @org.checkerframework.checker.nullness.qual.NonNull HttpResponseMessage execute(@org.checkerframework.checker.initialization.qual.UnderInitialization(net.oauth.http.HttpMessage.class) @org.checkerframework.checker.nullness.qual.NonNull HttpMessage request, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<String, Object> httpParameters) throws IOException;

    /**
     * The name of the parameter that is the maximum time to wait to connect to
     * the server. (Integer msec)
     */
    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String CONNECT_TIMEOUT = "connectTimeout";

    /**
     * The name of the parameter that is the maximum time to wait for response
     * data. (Integer msec)
     */
    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String READ_TIMEOUT = "readTimeout";

    /**
     * The name of the parameter to automatically follow redirects. (Boolean)
     */
    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String FOLLOW_REDIRECTS = "followRedirects";

    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String GET = OAuthMessage.GET;

    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String POST = OAuthMessage.POST;

    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String PUT = OAuthMessage.PUT;

    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String DELETE = OAuthMessage.DELETE;
}
