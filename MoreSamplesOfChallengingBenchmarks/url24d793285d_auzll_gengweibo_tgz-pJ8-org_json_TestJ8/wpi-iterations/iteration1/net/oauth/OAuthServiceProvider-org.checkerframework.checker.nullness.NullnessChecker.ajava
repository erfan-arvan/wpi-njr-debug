/*
 * Copyright 2007 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.oauth;

import java.io.Serializable;

/**
 * Properties of an OAuth Service Provider.
 *
 * @author John Kristian
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class OAuthServiceProvider implements Serializable {

    private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long serialVersionUID = 3306534392621038574L;

    public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String requestTokenURL;

    public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String userAuthorizationURL;

    public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String accessTokenURL;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public OAuthServiceProvider(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String requestTokenURL, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String userAuthorizationURL, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String accessTokenURL) {
        this.requestTokenURL = requestTokenURL;
        this.userAuthorizationURL = userAuthorizationURL;
        this.accessTokenURL = accessTokenURL;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int hashCode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OAuthServiceProvider this) {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((accessTokenURL == null) ? 0 : accessTokenURL.hashCode());
        result = prime * result + ((requestTokenURL == null) ? 0 : requestTokenURL.hashCode());
        result = prime * result + ((userAuthorizationURL == null) ? 0 : userAuthorizationURL.hashCode());
        return result;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean equals(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OAuthServiceProvider this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OAuthServiceProvider other = (OAuthServiceProvider) obj;
        if (accessTokenURL == null) {
            if (other.accessTokenURL != null)
                return false;
        } else if (!accessTokenURL.equals(other.accessTokenURL))
            return false;
        if (requestTokenURL == null) {
            if (other.requestTokenURL != null)
                return false;
        } else if (!requestTokenURL.equals(other.requestTokenURL))
            return false;
        if (userAuthorizationURL == null) {
            if (other.userAuthorizationURL != null)
                return false;
        } else if (!userAuthorizationURL.equals(other.userAuthorizationURL))
            return false;
        return true;
    }
}
