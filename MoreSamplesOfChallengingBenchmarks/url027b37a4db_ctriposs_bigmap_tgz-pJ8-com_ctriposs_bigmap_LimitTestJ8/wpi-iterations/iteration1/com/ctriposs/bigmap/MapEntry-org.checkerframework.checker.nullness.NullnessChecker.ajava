package com.ctriposs.bigmap;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import com.ctriposs.bigmap.page.IMappedPage;
import com.ctriposs.bigmap.page.IMappedPageFactory;

/**
 * Helper class representing an entry pointing to the memory mapped map entry.
 *
 * @author bulldog
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class MapEntry {

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_DATA_PAGE_INDEX_OFFSET = 0;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_DATA_SLOT_OFFSET_OFFSET = 8;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_DATA_SLOT_LENGTH_OFFSET = 12;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_MAP_ENTRY_KEY_LENGTH_OFFSET = 16;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_MAP_ENTRY_VALUE_LENGTH_OFFSET = 20;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_MAP_ENTRY_CREATED_TIME_OFFSET = 24;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_MAP_ENTRY_LAST_ACCESS_TIME_OFFSET = 32;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_MAP_ENTRY_TIME_TO_LIVE_OFFSET = 40;

    final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INDEX_ITEM_MAP_ENTRY_STATUS = 60;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IMappedPage indexPage;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IMappedPageFactory dataPageFactory;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int indexItemOffset;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int realLength;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public MapEntry( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int realLength,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int indexItemOffset, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IMappedPage indexPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IMappedPageFactory dataPageFactory) {
        this.index = index;
        this.realLength = realLength;
        this.indexItemOffset = indexItemOffset;
        this.indexPage = indexPage;
        this.dataPageFactory = dataPageFactory;
    }

    @org.checkerframework.dataflow.qual.Impure
    public MapEntry( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int indexItemOffset, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IMappedPage indexPage, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IMappedPageFactory dataPageFactory) {
        this.index = index;
        this.indexItemOffset = indexItemOffset;
        this.indexPage = indexPage;
        this.dataPageFactory = dataPageFactory;
        this.realLength = this.getKeyLength() + this.getValueLength();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getIndex() {
        return this.index;
    }

    /**
     * key length + value length
     * @return length
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getRealEntryLength() {
        return this.realLength;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getSlotSize() {
        return indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_DATA_SLOT_LENGTH_OFFSET);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getKeyLength() {
        return indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_MAP_ENTRY_KEY_LENGTH_OFFSET);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putKeyLength( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int keyLength) {
        indexPage.getLocal().putInt(indexItemOffset + INDEX_ITEM_MAP_ENTRY_KEY_LENGTH_OFFSET, keyLength);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getValueLength() {
        return indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_MAP_ENTRY_VALUE_LENGTH_OFFSET);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putValueLength( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int valueLength) {
        indexPage.getLocal().putInt(indexItemOffset + INDEX_ITEM_MAP_ENTRY_VALUE_LENGTH_OFFSET, valueLength);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getCreatedTime() {
        return indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_MAP_ENTRY_CREATED_TIME_OFFSET);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putCreatedTime( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long createdTime) {
        indexPage.getLocal().putLong(indexItemOffset + INDEX_ITEM_MAP_ENTRY_CREATED_TIME_OFFSET, createdTime);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getLastAccessedTime() {
        return indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_MAP_ENTRY_LAST_ACCESS_TIME_OFFSET);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putLastAccessedTime( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long lastAccessedTime) {
        indexPage.getLocal().putLong(indexItemOffset + INDEX_ITEM_MAP_ENTRY_LAST_ACCESS_TIME_OFFSET, lastAccessedTime);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getTimeToLive() {
        return indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_MAP_ENTRY_TIME_TO_LIVE_OFFSET);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putTimeToLive( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long ttlInMs) {
        indexPage.getLocal().putLong(indexItemOffset + INDEX_ITEM_MAP_ENTRY_TIME_TO_LIVE_OFFSET, ttlInMs);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isReleased() {
        byte status = indexPage.getLocal().get(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS);
        return (status & (1 << 1)) != 0;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void markReleased() {
        byte status = indexPage.getLocal().get(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS);
        status = (byte) (status | (1 << 1));
        indexPage.getLocal().put(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS, status);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isInUse() {
        byte status = indexPage.getLocal().get(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS);
        return (status & (1 << 1)) == 0;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void MarkInUse() {
        byte status = indexPage.getLocal().get(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS);
        status = (byte) (status & ~(1 << 1));
        indexPage.getLocal().put(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS, status);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isAllocated() {
        byte status = indexPage.getLocal().get(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS);
        return (status & 1) != 0;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void MarkAllocated() {
        byte status = indexPage.getLocal().get(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS);
        status = (byte) (status | 1);
        indexPage.getLocal().put(indexItemOffset + INDEX_ITEM_MAP_ENTRY_STATUS, status);
        indexPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull byte @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] getEntryKey() throws IOException {
        long dataPageIndex = indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_DATA_PAGE_INDEX_OFFSET);
        int dataSlotOffset = indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_DATA_SLOT_OFFSET_OFFSET);
        int entryKeyOffset = dataSlotOffset;
        int entryKeyLength = this.getKeyLength();
        IMappedPage dataPage = dataPageFactory.acquirePage(dataPageIndex);
        byte[] value = dataPage.getLocal(entryKeyOffset, entryKeyLength);
        return value;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putEntryKey( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull byte @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] entryKey) throws IOException {
        long dataPageIndex = indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_DATA_PAGE_INDEX_OFFSET);
        int dataSlotOffset = indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_DATA_SLOT_OFFSET_OFFSET);
        int entryKeyOffset = dataSlotOffset;
        IMappedPage dataPage = dataPageFactory.acquirePage(dataPageIndex);
        ByteBuffer dataItemBuffer = dataPage.getLocal(entryKeyOffset);
        dataItemBuffer.put(entryKey);
        dataPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull byte @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] getEntryValue() throws IOException {
        long dataPageIndex = indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_DATA_PAGE_INDEX_OFFSET);
        int dataSlotOffset = indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_DATA_SLOT_OFFSET_OFFSET);
        int entryValueOffset = dataSlotOffset + this.getKeyLength();
        int entryValueLength = getValueLength();
        IMappedPage dataPage = dataPageFactory.acquirePage(dataPageIndex);
        byte[] value = dataPage.getLocal(entryValueOffset, entryValueLength);
        return value;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putEntryValue( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull byte @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] entryValue) throws IOException {
        long dataPageIndex = indexPage.getLocal().getLong(indexItemOffset + INDEX_ITEM_DATA_PAGE_INDEX_OFFSET);
        int dataSlotOffset = indexPage.getLocal().getInt(indexItemOffset + INDEX_ITEM_DATA_SLOT_OFFSET_OFFSET);
        int entryValueOffset = dataSlotOffset + this.getKeyLength();
        IMappedPage dataPage = dataPageFactory.acquirePage(dataPageIndex);
        ByteBuffer dataItemBuffer = dataPage.getLocal(entryValueOffset);
        dataItemBuffer.put(entryValue);
        dataPage.setDirty(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean equals(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MapEntry this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object o) {
        if (o == null)
            return false;
        if (o == this)
            return true;
        if (getClass() != o.getClass())
            return false;
        MapEntry other = (MapEntry) o;
        try {
            // equals only if the keys are equal
            return Arrays.equals(this.getEntryKey(), other.getEntryKey());
        } catch (IOException e) {
            throw new RuntimeException("fail to get entry key", e);
        }
    }
}
