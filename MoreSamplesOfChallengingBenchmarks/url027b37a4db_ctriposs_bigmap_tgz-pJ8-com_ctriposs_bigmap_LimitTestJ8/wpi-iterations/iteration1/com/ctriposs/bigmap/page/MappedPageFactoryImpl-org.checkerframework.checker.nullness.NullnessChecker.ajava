package com.ctriposs.bigmap.page;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.ctriposs.bigmap.utils.FileUtil;
import static java.nio.channels.FileChannel.MapMode.READ_WRITE;

/**
 * Mapped mapped page resource manager,
 * responsible for the creation, cache the mapped pages.
 *
 * @author bulldog
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class MappedPageFactoryImpl implements IMappedPageFactory {

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Logger logger = LoggerFactory.getLogger(MappedPageFactoryImpl.class);

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int pageSize;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String pageDir;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull File pageDirFile;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String pageFile;

    public static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String PAGE_FILE_NAME = "page";

    public static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String PAGE_FILE_SUFFIX = ".dat";

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<Long, MappedPageImpl> cache;

    @org.checkerframework.dataflow.qual.Impure
    public MappedPageFactoryImpl( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int pageSize, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String pageDir) {
        this.pageSize = pageSize;
        this.pageDir = pageDir;
        this.pageDirFile = new File(this.pageDir);
        if (!pageDirFile.exists()) {
            pageDirFile.mkdirs();
        }
        if (!this.pageDir.endsWith(File.separator)) {
            this.pageDir += File.separator;
        }
        this.pageFile = this.pageDir + PAGE_FILE_NAME + "-";
        this.cache = new HashMap<Long, MappedPageImpl>();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IMappedPage acquirePage(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index) throws IOException {
        MappedPageImpl mpi = cache.get(index);
        if (mpi == null) {
            // not in cache, need to create one
            synchronized (cache) {
                // lock the map
                // double check
                mpi = cache.get(index);
                if (mpi == null) {
                    RandomAccessFile raf = null;
                    FileChannel channel = null;
                    try {
                        String fileName = this.getFileNameByIndex(index);
                        raf = new RandomAccessFile(fileName, "rw");
                        channel = raf.getChannel();
                        MappedByteBuffer mbb = channel.map(READ_WRITE, 0, this.pageSize);
                        mpi = new MappedPageImpl(mbb, fileName, index);
                        cache.put(index, mpi);
                        if (logger.isDebugEnabled()) {
                            logger.debug("Mapped page for " + fileName + " was just created and cached.");
                        }
                    } finally {
                        if (channel != null)
                            channel.close();
                        if (raf != null)
                            raf.close();
                    }
                }
            }
        } else {
            if (logger.isDebugEnabled()) {
                logger.debug("Hit mapped page " + mpi.getPageFile() + " in cache.");
            }
        }
        return mpi;
    }

    @org.checkerframework.dataflow.qual.Pure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getFileNameByIndex( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index) {
        return this.pageFile + index + PAGE_FILE_SUFFIX;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getPageSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) {
        return pageSize;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getPageDir(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) {
        return pageDir;
    }

    /**
     * thread unsafe, caller need synchronization
     */
    @org.checkerframework.dataflow.qual.Impure
    public void releaseCachedPages(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) throws IOException {
        this.removeAllCache();
    }

    /**
     * thread unsafe, caller need synchronization
     */
    @org.checkerframework.dataflow.qual.Impure
    public void deleteAllPages(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) throws IOException {
        this.removeAllCache();
        Set<Long> indexSet = getExistingBackFileIndexSet();
        this.deletePages(indexSet);
        if (logger.isDebugEnabled()) {
            logger.debug("All page files in dir " + this.pageDir + " have been deleted.");
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void removeCache( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index) throws IOException {
        MappedPageImpl page = cache.remove(index);
        if (page != null) {
            page.close();
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void removeAllCache() throws IOException {
        for (MappedPageImpl page : cache.values()) {
            page.close();
        }
        cache.clear();
    }

    /**
     * thread unsafe, caller need synchronization
     */
    @org.checkerframework.dataflow.qual.Impure
    public void deletePages(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<Long> indexes) throws IOException {
        if (indexes == null)
            return;
        for (long index : indexes) {
            this.deletePage(index);
        }
    }

    /**
     * thread unsafe, caller need synchronization
     */
    @org.checkerframework.dataflow.qual.Impure
    public void deletePage(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index) throws IOException {
        // remove the page from cache first
        this.removeCache(index);
        String fileName = this.getFileNameByIndex(index);
        int count = 0;
        int maxRound = 10;
        boolean deleted = false;
        while (count < maxRound) {
            try {
                FileUtil.deleteFile(new File(fileName));
                deleted = true;
                break;
            } catch (IllegalStateException ex) {
                try {
                    Thread.sleep(200);
                } catch (InterruptedException e) {
                }
                count++;
                if (logger.isDebugEnabled()) {
                    logger.warn("fail to delete file " + fileName + ", tried round = " + count);
                }
            }
        }
        if (deleted) {
            logger.info("Page file " + fileName + " was just deleted.");
        } else {
            logger.warn("fail to delete file " + fileName + " after max " + maxRound + " rounds of try, you may delete it manually.");
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<Long> getPageIndexSetBefore(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long timestamp) {
        Set<Long> beforeIndexSet = new HashSet<Long>();
        File[] pageFiles = this.pageDirFile.listFiles();
        if (pageFiles != null && pageFiles.length > 0) {
            for (File pageFile : pageFiles) {
                if (pageFile.lastModified() < timestamp) {
                    String fileName = pageFile.getName();
                    if (fileName.endsWith(PAGE_FILE_SUFFIX)) {
                        long index = this.getIndexByFileName(fileName);
                        beforeIndexSet.add(index);
                    }
                }
            }
        }
        return beforeIndexSet;
    }

    @org.checkerframework.dataflow.qual.Pure
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getIndexByFileName(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String fileName) {
        int beginIndex = fileName.lastIndexOf('-');
        beginIndex += 1;
        int endIndex = fileName.lastIndexOf(PAGE_FILE_SUFFIX);
        String sIndex = fileName.substring(beginIndex, endIndex);
        long index = Long.parseLong(sIndex);
        return index;
    }

    /**
     * thread unsafe, caller need synchronization
     * @throws IOException
     */
    @org.checkerframework.dataflow.qual.Impure
    public void deletePagesBefore(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long timestamp) throws IOException {
        Set<Long> indexSet = this.getPageIndexSetBefore(timestamp);
        this.deletePages(indexSet);
        if (logger.isDebugEnabled()) {
            logger.debug("All page files in dir [" + this.pageDir + "], before [" + timestamp + "] have been deleted.");
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<Long> getExistingBackFileIndexSet(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) {
        Set<Long> indexSet = new HashSet<Long>();
        File[] pageFiles = this.pageDirFile.listFiles();
        if (pageFiles != null && pageFiles.length > 0) {
            for (File pageFile : pageFiles) {
                String fileName = pageFile.getName();
                if (fileName.endsWith(PAGE_FILE_SUFFIX)) {
                    long index = this.getIndexByFileName(fileName);
                    indexSet.add(index);
                }
            }
        }
        return indexSet;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getCacheSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) {
        return cache.size();
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getPageFileLastModifiedTime(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index) {
        String pageFileName = this.getFileNameByIndex(index);
        File pageFile = new File(pageFileName);
        if (!pageFile.exists()) {
            return -1L;
        }
        return pageFile.lastModified();
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getFirstPageIndexBefore(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long timestamp) {
        Set<Long> beforeIndexSet = getPageIndexSetBefore(timestamp);
        if (beforeIndexSet.size() == 0)
            return -1L;
        TreeSet<Long> sortedIndexSet = new TreeSet<Long>(beforeIndexSet);
        Long largestIndex = sortedIndexSet.last();
        if (largestIndex != Long.MAX_VALUE) {
            // no wrap, just return the largest
            return largestIndex;
        } else {
            // wrapped case
            Long next = 0L;
            while (sortedIndexSet.contains(next)) {
                next++;
            }
            if (next == 0L) {
                return Long.MAX_VALUE;
            } else {
                return --next;
            }
        }
    }

    /**
     * thread unsafe, caller need synchronization
     */
    @org.checkerframework.dataflow.qual.Impure
    public void flush(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) {
        Collection<MappedPageImpl> cachedPages = cache.values();
        for (IMappedPage mappedPage : cachedPages) {
            mappedPage.flush();
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<String> getBackPageFileSet(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) {
        Set<String> fileSet = new HashSet<String>();
        File[] pageFiles = this.pageDirFile.listFiles();
        if (pageFiles != null && pageFiles.length > 0) {
            for (File pageFile : pageFiles) {
                String fileName = pageFile.getName();
                if (fileName.endsWith(PAGE_FILE_SUFFIX)) {
                    fileSet.add(fileName);
                }
            }
        }
        return fileSet;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getBackPageFileSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MappedPageFactoryImpl this) {
        long totalSize = 0L;
        File[] pageFiles = this.pageDirFile.listFiles();
        if (pageFiles != null && pageFiles.length > 0) {
            for (File pageFile : pageFiles) {
                String fileName = pageFile.getName();
                if (fileName.endsWith(PAGE_FILE_SUFFIX)) {
                    totalSize += pageFile.length();
                }
            }
        }
        return totalSize;
    }
}
