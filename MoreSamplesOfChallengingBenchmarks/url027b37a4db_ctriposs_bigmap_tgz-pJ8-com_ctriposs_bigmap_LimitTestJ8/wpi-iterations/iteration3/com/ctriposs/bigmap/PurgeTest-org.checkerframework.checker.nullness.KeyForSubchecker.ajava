package com.ctriposs.bigmap;

import static org.junit.Assert.*;
import java.io.File;
import java.io.IOException;
import org.junit.After;
import org.junit.Test;
import com.ctriposs.bigmap.utils.FileUtil;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class PurgeTest {

    private static  String testDir = TestUtil.TEST_BASE_DIR + "bigmap/unit/purge_test";

    private  BigConcurrentHashMapImpl map;

    @org.checkerframework.dataflow.qual.Impure
    public void scheduledPurgeTest() throws IOException, InterruptedException {
        BigConfig config = new BigConfig().setPurgeIntervalInMs(1000L);
        // 1 second expiration
        map = new BigConcurrentHashMapImpl(testDir, "scheduledPurgeTest", config);
        assertTrue(map.isEmpty());
        map.put("1".getBytes(), "A".getBytes(), 500);
        map.put("2".getBytes(), "B".getBytes(), 600);
        map.put("3".getBytes(), "C".getBytes(), 1200);
        map.put("4".getBytes(), "D".getBytes(), 2500);
        map.put("5".getBytes(), "E".getBytes(), 2500);
        // no expiration
        map.put("6".getBytes(), "F".getBytes());
        assertFalse(map.isEmpty());
        assertEquals(6, map.size());
        // 1, 2, 3 expired
        Thread.sleep(2200);
        assertTrue(map.purgeCount.get() > 1);
        assertFalse(map.isEmpty());
        // 4, 5, 6 left
        assertEquals(3, map.size());
        // 5 reset last access time
        assertEquals("E", new String(map.get("5".getBytes())));
        // 4 expired
        Thread.sleep(2000);
        assertTrue(map.purgeCount.get() > 2);
        assertFalse(map.isEmpty());
        // 5, 6 left
        assertEquals(2, map.size());
        // 5 expired
        Thread.sleep(2000);
        assertTrue(map.purgeCount.get() > 3);
        assertFalse(map.isEmpty());
        // 6 left
        assertEquals(1, map.size());
        assertEquals("F", new String(map.get("6".getBytes())));
        map.remove("6".getBytes());
        assertTrue(map.isEmpty());
        // 6 left
        assertEquals(0, map.size());
        for (int i = 0; i < 20000; i++) {
            map.put(("key" + i).getBytes(), ("value" + i).getBytes(), 500);
        }
        Thread.sleep(2000);
        assertTrue(map.isEmpty());
        // no left
        assertEquals(0, map.size());
    }

    @org.checkerframework.dataflow.qual.Impure
    public void purgeTriggerByGetTest() throws IOException, InterruptedException {
        BigConfig config = new BigConfig().setPurgeIntervalInMs(3000L);
        // 3 second expiration
        map = new BigConcurrentHashMapImpl(testDir, "purgeTriggerByGetTest", config);
        assertTrue(map.isEmpty());
        map.put("1".getBytes(), "A".getBytes(), 500);
        map.put("2".getBytes(), "B".getBytes(), 600);
        map.put("3".getBytes(), "C".getBytes(), 1200);
        map.put("4".getBytes(), "D".getBytes(), 2500);
        map.put("5".getBytes(), "E".getBytes(), 2500);
        assertFalse(map.isEmpty());
        assertEquals(5, map.size());
        Thread.sleep(1000);
        // purge trigger by get
        assertNull(map.get("1".getBytes()));
        // purge trigger by get
        assertNull(map.get("2".getBytes()));
        assertTrue(map.purgeCount.get() == 0);
        Thread.sleep(1000);
        // purge trigger by get
        assertNull(map.get("3".getBytes()));
        assertTrue(map.purgeCount.get() == 0);
        // scheduled purge
        Thread.sleep(1500);
        assertTrue(map.purgeCount.get() == 1);
        assertTrue(map.isEmpty());
        // no left
        assertEquals(0, map.size());
    }

    @org.checkerframework.dataflow.qual.Impure
    public void purgeTriggerByRemoveTest() throws IOException, InterruptedException {
        BigConfig config = new BigConfig().setPurgeIntervalInMs(3000L);
        // 3 second expiration
        map = new BigConcurrentHashMapImpl(testDir, "purgeTriggerByRemoveTest", config);
        assertTrue(map.isEmpty());
        map.put("1".getBytes(), "A".getBytes(), 500);
        map.put("2".getBytes(), "B".getBytes(), 600);
        map.put("3".getBytes(), "C".getBytes(), 1200);
        map.put("4".getBytes(), "D".getBytes(), 2500);
        map.put("5".getBytes(), "E".getBytes(), 2500);
        assertFalse(map.isEmpty());
        assertEquals(5, map.size());
        Thread.sleep(1000);
        // purge trigger by remove
        assertNull(map.remove("1".getBytes()));
        // purge trigger by remove
        assertNull(map.remove("2".getBytes()));
        assertTrue(map.purgeCount.get() == 0);
        Thread.sleep(1000);
        // purge trigger by remove
        assertNull(map.remove("3".getBytes()));
        // purge trigger by remove
        assertNotNull(map.remove("4".getBytes()));
        assertTrue(map.purgeCount.get() == 0);
        // scheduled purge
        Thread.sleep(1500);
        assertTrue(map.purgeCount.get() == 1);
        assertTrue(map.isEmpty());
        // no left
        assertEquals(0, map.size());
    }

    @org.checkerframework.dataflow.qual.Impure
    public void clear() throws IOException {
        if (map != null) {
            map.close();
        }
        FileUtil.deleteDirectory(new File(testDir));
    }
}
