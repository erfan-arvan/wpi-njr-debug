package com.ctriposs.bigmap;

import java.io.Closeable;
import java.io.IOException;
import java.util.NavigableSet;

/**
 * A Factory managing the creation & recycle of the map entry
 *
 * @author bulldog
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public interface IMapEntryFactory extends Closeable, IMMFStats {

    /**
     * Acquire a new map entry, either new or reused
     *
     * @param length length of the slot
     * @return a map entry
     * @throws IOException exception throw during the acquire operation
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MapEntry acquire( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length) throws IOException;

    /**
     * Release a map entry into the pool
     *
     * @param me map entry
     * @throws IOException exception thrown during the release operation
     */
    @org.checkerframework.dataflow.qual.Impure
    public void release(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MapEntry me) throws IOException;

    /**
     * Find a map entry by specified index
     *
     * @param index the target index
     * @return a map entry
     * @throws IOException exception thrown during the finding operation
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MapEntry findMapEntryByIndex( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long index) throws IOException;

    /**
     * Remove all data in the pool, this will empty the map and delete all back page files.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void removeAll() throws IOException;

    /**
     * Get total number of free entries with specific index
     *
     * @param index free entry index
     * @return total number of free entries
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getFreeEntryCountByIndex( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int index);

    /**
     * Get total size of free entries with specific index
     *
     * @param index free entry index
     * @return total size of free entries
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long getTotalFreeSlotSizeByIndex( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int index);

    /**
     * For testing only
     *
     * @return
     */
    @org.checkerframework.dataflow.qual.Pure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable NavigableSet<Integer> getFreeEntryIndexSet();

    /**
     * Persistent in memory cache
     */
    @org.checkerframework.dataflow.qual.Impure
    void flush();
}
