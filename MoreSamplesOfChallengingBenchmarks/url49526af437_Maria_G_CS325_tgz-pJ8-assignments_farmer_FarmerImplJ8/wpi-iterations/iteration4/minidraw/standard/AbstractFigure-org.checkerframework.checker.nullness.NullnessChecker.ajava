package minidraw.standard;

import minidraw.framework.*;
import java.awt.Rectangle;
import java.util.*;

/**
 * Abstract Figure: Base implementation of some Figure behaviour.
 * Responsibilities: A) All observer role "Subject" base functionality
 * is provided.
 *
 * Code partly copied from JHotDraw 5.1.
 *
 *   This source code is from the book
 *     "Flexible, Reliable Software:
 *       Using Patterns and Agile Development"
 *     published 2010 by CRC Press.
 *   Author:
 *     Henrik B Christensen
 *     Computer Science Department
 *     Aarhus University
 *
 *   This source code is provided WITHOUT ANY WARRANTY either
 *   expressed or implied. You may study, use, modify, and
 *   distribute it for non-commercial purposes. For any
 *   commercial use, see http://www.baerbak.com/
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public abstract class AbstractFigure implements Figure {

    /**
     * the listeners of this figure
     */
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<FigureChangeListener> listenerList;

    /**
     * Base construction of a figure
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public AbstractFigure() {
        listenerList = new ArrayList<FigureChangeListener>();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void moveBy(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractFigure this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int dx,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int dy) {
        willChange();
        basicMoveBy(dx, dy);
        changed();
    }

    /**
     * Informes that a figure is about to change something that
     * affects the contents of its display box.
     */
    @org.checkerframework.dataflow.qual.Impure
    protected void willChange() {
        invalidate();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void invalidate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractFigure this) {
        for (FigureChangeListener l : listenerList) {
            Rectangle r = (Rectangle) displayBox().clone();
            FigureChangeEvent e = new FigureChangeEvent(this, r);
            l.figureInvalidated(e);
        }
    }

    /**
     * This is the hook method to be overridden when a figure
     * moves. Do not call directly, instead call 'moveBy'.
     */
    @org.checkerframework.dataflow.qual.Impure
    protected abstract void basicMoveBy( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int dx,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int dy);

    @org.checkerframework.dataflow.qual.Impure
    public void changed(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractFigure this) {
        invalidate();
        for (FigureChangeListener l : listenerList) {
            FigureChangeEvent e = new FigureChangeEvent(this);
            l.figureChanged(e);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void addFigureChangeListener(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FigureChangeListener l) {
        listenerList.add(l);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void removeFigureChangeListener(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AbstractFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FigureChangeListener l) {
        listenerList.remove(l);
    }
}
