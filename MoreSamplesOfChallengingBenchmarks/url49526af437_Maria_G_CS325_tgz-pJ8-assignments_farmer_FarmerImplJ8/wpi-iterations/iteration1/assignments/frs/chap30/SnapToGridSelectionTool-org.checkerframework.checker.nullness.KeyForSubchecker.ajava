package assignments.frs.chap30;

import java.awt.event.MouseEvent;
import minidraw.framework.*;
import minidraw.standard.AbstractTool;
import minidraw.standard.NullTool;
import minidraw.standard.handlers.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class SnapToGridSelectionTool extends AbstractTool implements Tool {

    /**
     * Subtool to delegate to. The selection tool is in itself
     *     a state tool that may be in one of several states given
     *     by the sub tool.
     *     Class Invariant: fChild tool is never null
     */
    protected  Tool fChild;

    /**
     * helper null tool to avoid creating and destroying objects
     *     all the time
     */
    protected  Tool cachedNullTool;

    /**
     * the figure that is being dragged. If null then its operation
     *      is not that of dragging a figure (or a set of figures)
     */
    protected  Figure draggedFigure;

    /**
     * the rubber band selection strategy to use.
     */
     RubberBandSelectionStrategy selectionStrategy;

    private   int gridRows;

    private   int gridCols;

    @org.checkerframework.dataflow.qual.Impure
    public SnapToGridSelectionTool( DrawingEditor editor,   int gridRows,   int gridCols) {
        this(editor, new StandardRubberBandSelectionStrategy());
        this.gridRows = gridRows;
        this.gridCols = gridCols;
    }

    /**
     * Define a selection tool where the SelectAreaTracker takes
     *      a special RubberBandSelection strategy.
     */
    @org.checkerframework.dataflow.qual.Impure
    public SnapToGridSelectionTool( DrawingEditor editor,  RubberBandSelectionStrategy selectionStrategy) {
        super(editor);
        fChild = cachedNullTool = new NullTool();
        draggedFigure = null;
        this.selectionStrategy = selectionStrategy;
    }

    /**
     * Handles mouse down events and starts the corresponding tracker.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void mouseDown( SnapToGridSelectionTool this,  MouseEvent e,   int x,   int y) {
        Drawing model = editor().drawing();
        model.lock();
        draggedFigure = model.findFigure(e.getX(), e.getY());
        if (draggedFigure != null) {
            fChild = createDragTracker(draggedFigure);
        } else {
            if (!e.isShiftDown()) {
                model.clearSelection();
            }
            fChild = createAreaTracker();
        }
        fChild.mouseDown(e, x, y);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void mouseDrag( SnapToGridSelectionTool this,  MouseEvent e,   int x,   int y) {
        fChild.mouseDrag(e, x, y);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void mouseMove( SnapToGridSelectionTool this,  MouseEvent e,   int x,   int y) {
        fChild.mouseMove(e, x, y);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void mouseUp( SnapToGridSelectionTool this,  MouseEvent e,   int x,   int y) {
        editor().drawing().unlock();
        fChild.mouseUp(e, x, y);
        fChild = cachedNullTool;
        draggedFigure = null;
    }

    /**
     * Factory method to create a Drag tracker. It is used to drag a figure.
     */
    @org.checkerframework.dataflow.qual.Impure
    protected  Tool createDragTracker( SnapToGridSelectionTool this,  Figure f) {
        return new SnapToGridDragTracker(editor(), f, this.gridRows, this.gridCols);
    }

    /**
     * Factory method to create an Area Tracker. It is used to select an area.
     */
    @org.checkerframework.dataflow.qual.Impure
    protected  Tool createAreaTracker( SnapToGridSelectionTool this) {
        return new SelectAreaTracker(editor(), selectionStrategy);
    }
}
