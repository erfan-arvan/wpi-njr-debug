package frs.hotgammon.view;

import minidraw.framework.*;
import minidraw.standard.ImageManager;
import minidraw.standard.MiniDrawApplication;
import minidraw.standard.NullTool;
import minidraw.standard.StdViewWithBackground;
import javax.swing.*;
import frs.hotgammon.framework.Game;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class HotGammonApplication extends MiniDrawApplication {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JButton newGameBtn = new JButton("New Game");

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Game game;

    @org.checkerframework.dataflow.qual.Impure
    public HotGammonApplication(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String title, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Factory f, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Game game) {
        super(title, f);
        this.game = game;
        this.setLayout(new BorderLayout());
        newGameBtn.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                newGameButtonCalled();
            }
        });
        this.add(newGameBtn, BorderLayout.SOUTH);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void newGameButtonCalled() {
        this.open();
        this.game.newGame();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void open(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull HotGammonApplication this) {
        Container pane = getContentPane();
        // create the underlying model in the MVC triad
        fDrawing = factory.createDrawing(this);
        ((HotGammonDrawing) fDrawing).setGame(game);
        //&& AddObserver to game
        game.addObserver((HotGammonDrawing) fDrawing);
        // create a view for the MVC
        fView = factory.createDrawingView(this);
        statusField = factory.createStatusField(this);
        JPanel panel = createContents(fView, statusField);
        pane.add(panel, BorderLayout.CENTER);
        pack();
        setVisible(true);
    }
}
