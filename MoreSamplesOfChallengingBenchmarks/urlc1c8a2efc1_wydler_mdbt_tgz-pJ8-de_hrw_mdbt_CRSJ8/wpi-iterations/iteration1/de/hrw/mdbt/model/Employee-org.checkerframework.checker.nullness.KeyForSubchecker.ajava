package de.hrw.mdbt.model;

import java.util.ArrayList;
import com.db4o.ObjectContainer;
import com.db4o.config.CommonConfigurationProvider;
import com.db4o.constraints.UniqueFieldValueConstraint;
import com.db4o.ext.Db4oException;
import de.hrw.mdbt.model.Branch;
import de.hrw.mdbt.model.Person;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class Employee extends Person {

    private  ArrayList<Task> tasks = new ArrayList<Task>();

    private   float salary;

    private  String ssn;

    private  Branch branch;

    private  Employee supervisor;

    @org.checkerframework.dataflow.qual.Impure
    public Employee(  int id,  String lastname) {
        super(id, lastname);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void addTask(Task t) {
        tasks.add(t);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void removeTask(Task t) {
        tasks.remove(t);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   float getSalary() {
        return salary;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setSalary(float salary) {
        this.salary = salary;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getSsn() {
        return ssn;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setSsn(String ssn) {
        this.ssn = ssn;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Branch getBranch() {
        return branch;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setBranch(Branch branch) {
        this.branch = branch;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Employee getSupervisor() {
        return supervisor;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setSupervisor(Employee supervisor) {
        this.supervisor = supervisor;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void configure(CommonConfigurationProvider config) {
        config.common().objectClass(Customer.class).objectField("id").indexed(true);
        config.common().add(new UniqueFieldValueConstraint(Employee.class, "id"));
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean objectCanNew( Employee this,  ObjectContainer container) throws Db4oException {
        if (super.getEmail() != null)
            if (!super.getEmail().endsWith("@crc.com"))
                throw new Db4oException("E-Mail must end with @crc.com!");
        return true;
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean objectCanUpdate( Employee this,  ObjectContainer container) throws Db4oException {
        if (super.getEmail() == null || super.getEmail().endsWith("@crc.com"))
            throw new Db4oException("E-Mail must end with @crc.com!");
        return true;
    }
}
