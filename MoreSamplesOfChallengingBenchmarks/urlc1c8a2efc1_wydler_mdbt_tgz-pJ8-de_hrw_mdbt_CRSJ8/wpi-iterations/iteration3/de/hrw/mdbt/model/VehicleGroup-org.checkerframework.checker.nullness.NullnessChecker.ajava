package de.hrw.mdbt.model;

import java.util.Date;
import java.util.ArrayList;
import com.db4o.ObjectContainer;
import de.hrw.mdbt.model.Model;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class VehicleGroup {

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean aboutToDelete = false;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int power;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull String fuelType;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Date purchaseDate;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull String color;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Model model;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull PriceClass priceClass;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ArrayList<Vehicle> vehicles = new ArrayList<Vehicle>();

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ArrayList<Equipment> equipment = new ArrayList<Equipment>();

    @org.checkerframework.dataflow.qual.SideEffectFree
    public VehicleGroup() {
    }

    @org.checkerframework.dataflow.qual.Impure
    public VehicleGroup( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int power, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String fuelType, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Date purchaseDate, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String color, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Model model, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PriceClass priceClass) {
        setPower(power);
        setFuelType(fuelType);
        setPurchaseDate(purchaseDate);
        setColor(color);
        setModel(model);
        setPriceClass(priceClass);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getPower() {
        return power;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setPower( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int power) {
        this.power = power;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getFuelType() {
        return fuelType;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setFuelType(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String fuelType) {
        this.fuelType = fuelType;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Date getPurchaseDate() {
        return purchaseDate;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setPurchaseDate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Date purchaseDate) {
        this.purchaseDate = purchaseDate;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getColor() {
        return color;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setColor(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String color) {
        this.color = color;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Model getModel() {
        return model;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setModel(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Model model) {
        this.model = model;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable PriceClass getPriceClass() {
        return priceClass;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setPriceClass(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PriceClass priceClass) {
        this.priceClass = priceClass;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ArrayList<Equipment> getEquipment() {
        return equipment;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setEquipment(ArrayList<Equipment> equipments) {
        this.equipment = equipments;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ArrayList<Vehicle> getVehicles() {
        return vehicles;
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void setVehicles(ArrayList<Vehicle> vehicles) {
        this.vehicles = vehicles;
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void addVehicle(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vehicle vehicle) {
        this.vehicles.add(vehicle);
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void removeVehicle(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vehicle vehicle) {
        this.vehicles.remove(vehicle);
    }

    @org.checkerframework.dataflow.qual.Pure
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean checkConstraints() {
        //HACK: prevent inserts/updates during objectOnDelete
        if (aboutToDelete)
            return false;
        if (this.power < 0)
            return false;
        if (this.fuelType == null)
            return false;
        if (this.model == null)
            return false;
        if (this.priceClass == null)
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean objectCanNew(ObjectContainer db) {
        return checkConstraints();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean objectCanUpdate(ObjectContainer db) {
        return checkConstraints();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void objectOnDelete(ObjectContainer db) {
        aboutToDelete = true;
        ArrayList<Vehicle> vehiclesToDelete = new ArrayList<Vehicle>(vehicles);
        for (Vehicle v : vehiclesToDelete) {
            if (v != null) {
                db.activate(v, 1);
                db.delete(v);
            }
        }
    }
}
