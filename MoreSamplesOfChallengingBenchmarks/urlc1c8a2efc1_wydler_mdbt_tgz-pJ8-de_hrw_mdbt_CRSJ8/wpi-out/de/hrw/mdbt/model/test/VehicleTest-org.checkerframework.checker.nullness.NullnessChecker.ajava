package de.hrw.mdbt.model.test;

import static org.junit.Assert.assertEquals;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Time;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import com.db4o.Db4oEmbedded;
import com.db4o.ObjectContainer;
import com.db4o.config.EmbeddedConfiguration;
import com.db4o.constraints.UniqueFieldValueConstraintViolationException;
import de.hrw.mdbt.model.Address;
import de.hrw.mdbt.model.Branch;
import de.hrw.mdbt.model.Model;
import de.hrw.mdbt.model.PriceClass;
import de.hrw.mdbt.model.Vehicle;
import de.hrw.mdbt.model.VehicleGroup;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class VehicleTest {

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String DB_TESTFILE = "VehicleTest.db4o";

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull ObjectContainer db;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Branch b;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Vehicle v;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull VehicleGroup vg;

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ExpectedException exception = ExpectedException.none();

    @org.checkerframework.dataflow.qual.Impure
    public static void setUpBeforeClass() throws Exception {
        Files.deleteIfExists(Paths.get(DB_TESTFILE));
        EmbeddedConfiguration config;
        config = Db4oEmbedded.newConfiguration();
        Vehicle.configure(config);
        db = Db4oEmbedded.openFile(config, DB_TESTFILE);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void tearDownAfterClass() throws Exception {
        db.close();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setUp() throws Exception {
        b = new Branch("myBranch", new Address(), Time.valueOf("9:0:0"), Time.valueOf("17:0:0"), "0123456789");
        Calendar c = new GregorianCalendar(2013, 1, 1);
        vg = new VehicleGroup(100, "Diesel", c.getTime(), "Blau", new Model(), new PriceClass());
        v = new Vehicle("RV-DB-40", "42", 1, b, vg);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void tearDown() throws Exception {
        db.rollback();
    }

    //TODO: add tests for getters/setters
    @org.checkerframework.dataflow.qual.Impure
    public void testStoreNegativeActualKmFail() {
        assertEquals(0, db.query(Branch.class).size());
        assertEquals(0, db.query(Vehicle.class).size());
        assertEquals(0, db.query(VehicleGroup.class).size());
        v.setActualKm(-1000);
        db.store(v);
        assertEquals(0, db.query(Branch.class).size());
        assertEquals(0, db.query(Vehicle.class).size());
        assertEquals(0, db.query(VehicleGroup.class).size());
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testStoreLicenseNumberUnique() {
        assertEquals(0, db.query(Vehicle.class).size());
        assertEquals(0, db.query(VehicleGroup.class).size());
        b = new Branch("myBranch", new Address(), Time.valueOf("9:0:0"), Time.valueOf("17:0:0"), "0123456789");
        Calendar c = new GregorianCalendar(2013, 1, 1);
        vg = new VehicleGroup(100, "Diesel", c.getTime(), "Blau", new Model(), new PriceClass());
        new Vehicle("RV-TT-0001", "1", 1, b, vg);
        new Vehicle("RV-TT-0001", "2", 10, b, vg);
        db.store(vg);
        //HACK: everything below in this function ;)
        // we need to commit as the unique constraint is checked when committing the change
        exception.expect(UniqueFieldValueConstraintViolationException.class);
        db.commit();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testStore() {
        assertEquals(0, db.query(Branch.class).size());
        assertEquals(0, db.query(Vehicle.class).size());
        assertEquals(0, db.query(VehicleGroup.class).size());
        db.store(v);
        assertEquals(1, db.query(Branch.class).size());
        assertEquals(1, db.query(Vehicle.class).size());
        assertEquals(1, db.query(VehicleGroup.class).size());
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testStoreMultipleVehicles() {
        assertEquals(0, db.query(Branch.class).size());
        assertEquals(0, db.query(Vehicle.class).size());
        assertEquals(0, db.query(VehicleGroup.class).size());
        new Vehicle("RV-TT-0001", "1", 1, b, vg);
        new Vehicle("RV-TT-0002", "2", 10, b, vg);
        new Vehicle("RV-TT-0003", "3", 100, b, vg);
        new Vehicle("RV-TT-0004", "4", 1000, b, vg);
        db.store(b);
        assertEquals(1, db.query(Branch.class).size());
        assertEquals(5, db.query(Branch.class).get(0).getVehicles().size());
        assertEquals(5, db.query(Vehicle.class).size());
        assertEquals(1, db.query(VehicleGroup.class).size());
        assertEquals(5, db.query(VehicleGroup.class).get(0).getVehicles().size());
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testDelete() {
        assertEquals(0, db.query(Branch.class).size());
        assertEquals(0, db.query(Vehicle.class).size());
        assertEquals(0, db.query(VehicleGroup.class).size());
        db.store(v);
        assertEquals(1, db.query(Branch.class).size());
        assertEquals(1, db.query(Branch.class).get(0).getVehicles().size());
        assertEquals(1, db.query(Vehicle.class).size());
        assertEquals(1, db.query(VehicleGroup.class).size());
        assertEquals(1, db.query(VehicleGroup.class).get(0).getVehicles().size());
        db.delete(v);
        assertEquals(1, db.query(Branch.class).size());
        assertEquals(0, db.query(Branch.class).get(0).getVehicles().size());
        assertEquals(0, db.query(Vehicle.class).size());
        assertEquals(1, db.query(VehicleGroup.class).size());
        assertEquals(0, db.query(VehicleGroup.class).get(0).getVehicles().size());
    }
}
