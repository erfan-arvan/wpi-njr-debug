import jatrace.*;
import java.io.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class MyImageTest {

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color darkerThanBlack = new Color(-1.00, -1.00, -1.00);

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color black = new Color(0.001, 0.001, 0.001);

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color red = new Color(0.999, 0.001, 0.001);

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color green = new Color(0.001, 0.999, 0.001);

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color blue = new Color(0.001, 0.001, 0.999);

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color white = new Color(0.999, 0.999, 0.999);

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color lighterThanWhite = new Color(1.100, 1.100, 1.100);

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String tempfile = "MyImageTest.tmp.png";

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] colors = new Color[] { darkerThanBlack, black, red, green, blue, white, lighterThanWhite };

    @org.checkerframework.dataflow.qual.Impure
    private static void deleteTemp() {
        try {
            String pathToTemp = new File(tempfile).getCanonicalPath();
            new File(pathToTemp).delete();
            System.out.println("Deleted '" + tempfile + "'.");
        } catch (Exception e) {
            System.out.println("Failed to delete temp file.");
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean ReadWriteTest(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color color) {
        myImage tmp;
        tmp = new myImage(1, 1);
        tmp.setPixel(0, 0, color);
        tmp.write(tempfile);
        Color read = myImage.read(tempfile).getPixel(0, 0);
        deleteTemp();
        if (color.equals(read)) {
            return true;
        } else {
            System.out.println(color + " doesn't equal " + read);
            return false;
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) {
        int[] samples;
        for (Color color : colors) {
            ReadWriteTest(color);
            System.out.println("");
        }
        /*
		success = success && ReadWriteTest(darkerThanBlack);
		success = success && ReadWriteTest(black);
		success = success && ReadWriteTest(red);
		success = success && ReadWriteTest(green);
		success = success && ReadWriteTest(blue);
		success = success && ReadWriteTest(white);
		success = success && ReadWriteTest(lighterThanWhite);
		
		assert (success) : "something went wrong somewhere";
		*/
    }
}
