package shyview;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.imageio.ImageIO;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Picture implements IPicture {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull URL picres;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Future<Image> swapimage = null;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull String alternative_name = null;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull ActionListener listener;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Picture(URL url) {
        picres = url;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Picture(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String strurl) throws MalformedURLException {
        picres = new URL(strurl);
    }

    @org.checkerframework.dataflow.qual.Impure
    public Picture(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull File f) throws MalformedURLException {
        picres = f.toURI().toURL();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getName(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this) {
        if (alternative_name != null)
            return alternative_name;
        return picres.getPath().substring(picres.getPath().lastIndexOf("/") + 1);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getPath(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this) {
        return picres.toString();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Image getPicture(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this) throws StillLoadingException, FileNotFoundException {
        if (swapimage == null || swapimage.isCancelled())
            preload();
        if (!swapimage.isDone())
            throw new StillLoadingException();
        Image tmp;
        try {
            tmp = swapimage.get();
        } catch (Exception e) {
            e.printStackTrace();
            throw new FileNotFoundException();
        }
        if (tmp == null)
            throw new FileNotFoundException();
        return tmp;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Dimension getDimension(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this) {
        if (swapimage != null) {
            Dimension d = new Dimension();
            Image pic;
            try {
                pic = getPicture();
            } catch (Exception e) {
                return null;
            }
            d.width = pic.getWidth(null);
            d.height = pic.getHeight(null);
            return d;
        }
        return null;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void flush(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this) {
        swapimage = null;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void interrupt(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this) {
        if (swapimage != null)
            swapimage.cancel(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void preload(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this) {
        //System.out.println("Preloading "+getName());
        if (swapimage == null) {
            ExecutorService exs = Executors.newSingleThreadExecutor();
            // start task
            swapimage = exs.submit(new ImageLoadTask(this));
        } else {
            listener.actionPerformed(new ActionEvent(this, 0, "loading finished"));
        }
    }

    class ImageLoadTask implements Callable<Image> {

        @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture parent;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public ImageLoadTask(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture parparent) {
            parent = parparent;
        }

        @org.checkerframework.dataflow.qual.Impure
        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Image call(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ImageLoadTask this) throws Exception {
            if (swapimage.isDone())
                return swapimage.get();
            try {
                System.out.println(System.currentTimeMillis() + " " + getName() + " start loading..");
                BufferedImage img = ImageIO.read(picres);
                System.out.println(System.currentTimeMillis() + " " + getName() + " finished loading..");
                if (parent.listener != null)
                    parent.listener.actionPerformed(new ActionEvent(parent, 0, "loading finished"));
                return img;
            } catch (IOException e) {
                e.printStackTrace();
                return null;
            }
        }
    }

    class StillLoadingException extends IOException {

        private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long serialVersionUID = 1L;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setName(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name) {
        alternative_name = name;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setActionListener(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Picture this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ActionListener al) {
        listener = al;
    }
}
