package jatrace.bodies;

import jatrace.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class Ellipse extends Plane {

    @org.checkerframework.dataflow.qual.Impure
    public Ellipse( Vector p,  Vector n,  Color c) {
        super(p, n, c);
    }

    @org.checkerframework.dataflow.qual.Impure
    public Ellipse() {
        super();
    }

    private  Vector xAxis = new Vector(1.0, 0.0, 0.0);

    private  Vector yAxis = new Vector(0.0, 1.0, 0.0);

    @org.checkerframework.dataflow.qual.Impure
    public final void setAxes( Ellipse this,  Vector xDir,  Vector yDir) {
        xLength = xDir.len();
        xAxis = xDir.dup().norm();
        yLength = yDir.len();
        yAxis = yDir.dup().norm();
        setNormal(xAxis.cross(yAxis));
        axesSet = true;
    }

    private   boolean axesSet = false;

    private double xLength, yLength;

    @org.checkerframework.dataflow.qual.Impure
    public final void setAxisLengths(double x, double y) {
        xLength = x;
        yLength = y;
    }

    @org.checkerframework.dataflow.qual.Impure
    public   double intersection( Ellipse this,  Ray ray) {
        if (!axesSet) {
            return -1.0;
        }
        double distance = super.intersection(ray);
        if (distance < 0.0)
            return distance;
        Vector p = ray.follow(distance);
        p.trans(position, -1.0);
        double xd = p.dot(xAxis);
        double yd = p.dot(yAxis);
        double distanceInPlane = xd * xd / xLength / xLength;
        distanceInPlane += yd * yd / yLength / yLength;
        if (distanceInPlane > 1.0)
            return -1.0;
        return distance;
    }
}
