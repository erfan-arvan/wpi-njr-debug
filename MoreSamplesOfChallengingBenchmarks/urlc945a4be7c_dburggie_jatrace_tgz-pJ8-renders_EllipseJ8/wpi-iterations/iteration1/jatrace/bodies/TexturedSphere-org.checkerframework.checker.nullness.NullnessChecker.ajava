package jatrace.bodies;

import jatrace.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TexturedSphere extends Sphere {

    private final static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double pi = Math.PI;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean textureLoaded = false;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull myImage texture;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double halfWidth;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int fullHeight;

    private Vector xAxis, yAxis, zAxis;

    @org.checkerframework.dataflow.qual.Impure
    private void init() {
        setCoordinates(new Vector(0.0, 1.0, 0.0), new Vector(1.0, 0.0, 0.0));
        setMatte(false);
        setReflectivity(0.01);
        setSpecularity(20.0);
        textureLoaded = false;
    }

    /**
     * Default sphere with no texture. Will not clip with rays until a valid
     *  texture file has been loaded.
     */
    @org.checkerframework.dataflow.qual.Impure
    public TexturedSphere() {
        super();
        init();
    }

    /**
     * Initializes new sphere with given position and radius, loading the
     *  texture at the given path.
     */
    @org.checkerframework.dataflow.qual.Impure
    public TexturedSphere(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector pos,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double rad, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String texturePath) {
        super(pos, rad, new Color(0.3, 0.1, 0.1));
        init();
        load(texturePath);
    }

    /**
     * Loads image at given path as the sphere's texture.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void load(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String texturePath) {
        texture = myImage.read(texturePath);
        if (texture != null) {
            halfWidth = texture.getWidth() / 2.0;
            fullHeight = texture.getHeight();
            textureLoaded = true;
        } else {
            System.out.println("Failed to load texture '" + texturePath + "'.");
            halfWidth = 0.0;
            fullHeight = 0;
            textureLoaded = false;
        }
    }

    /**
     * Sets the orientation of the textured sphere.
     *  @param pole the sphere's north pole
     *  @param meridian a vector on the sphere's prime meridian
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setCoordinates(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector pole, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector meridian) {
        zAxis = meridian.cross(pole);
        if (zAxis.len() < 0.000001) {
            System.out.println("You fed parallel vectors to a TexturedSphere.");
            xAxis = new Vector(1.0, 0.0, 0.0);
            yAxis = new Vector(0.0, 1.0, 0.0);
            zAxis = new Vector(0.0, 0.0, 1.0);
        } else {
            zAxis.norm();
            xAxis = pole.cross(zAxis).norm();
            yAxis = zAxis.cross(xAxis).norm();
        }
    }

    private final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String bounds = "acos is returning out of bounds";

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color getColor(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TexturedSphere this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector point) {
        /* We need to find the xpart, the y part of the point. */
        Vector v = point.sub(position).scale(1 / radius);
        double xDistance = v.dot(xAxis), zDistance = v.dot(zAxis);
        Vector projection = xAxis.dup().scale(xDistance);
        projection.trans(zAxis, zDistance).norm();
        double south = Math.acos(yAxis.dot(v)) / pi;
        double eastwest = Math.acos(xAxis.dot(projection)) / pi;
        //x and y are coordinates on the texture
        int x, y;
        //check if point is east or west of meridian
        if (zDistance > 0.0) {
            x = (int) (halfWidth - halfWidth * eastwest);
        } else {
            x = (int) (halfWidth + halfWidth * eastwest);
        }
        y = (int) (fullHeight * south);
        return texture.getPixel(x, y);
    }

    int hitcount, misscount;

    @org.checkerframework.dataflow.qual.Impure
    public void displayNumHits() {
        System.out.println("Hit by " + hitcount + " rays.");
        System.out.println("Missed by " + misscount + " rays.");
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double intersection(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TexturedSphere this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Ray ray) {
        if (textureLoaded) {
            return super.intersection(ray);
        } else {
            return -1.0;
        }
    }
}
