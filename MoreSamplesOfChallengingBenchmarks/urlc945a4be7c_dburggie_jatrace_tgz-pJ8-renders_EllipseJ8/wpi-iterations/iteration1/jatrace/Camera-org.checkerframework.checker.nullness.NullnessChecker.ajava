package jatrace;

/**
 * This class encapsulates the data required to provide a viewing window to
 *  the user.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Camera {

    //defaults
    private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int defaultPPU = 100;

    private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double defaultWidth = 1.0;

    private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double defaultHeight = 1.0;

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector defaultPosition = new Vector(0.0, 1.0, 10.0);

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector defaultFocus = new Vector(0.0, 0.0, 0.0);

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector defaultOrientation = new Vector(0.0, 1.0, 0.0);

    protected Vector position, focus, forward, up, right, corner, xstep, ystep;

    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int ppu;

    protected double width, height, d;

    protected boolean delta, initLock;

    /**
     * Default Constructor
     */
    @org.checkerframework.dataflow.qual.Impure
    public Camera() {
        this(defaultPosition, defaultFocus, defaultOrientation, defaultWidth, defaultHeight, defaultPPU);
        /*
		initLock = true;
		this.setPosition(defaultPosition);
		this.setFocus(defaultFocus);
		this.setOrientation(defaultOrientation);
		this.setWindow(defaultWidth, defaultHeight);
		this.setPPU(defaultPPU);
		delta = false;
		initLock = false;
		*/
    }

    /**
     * Here origin is a vector representing the position of the simulated
     *  camera, and focus refers to the center point of the focal window. The
     *  w and h parameters refer to the width and height of the focal window
     *  respectively. Note that the camera orientation will be vertical, or, if
     *  that is impossible, horizontal have "up" be the positive x direction.
     */
    @org.checkerframework.dataflow.qual.Impure
    public Camera(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector origin, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector focus,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double w,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double h) {
        this(origin, focus, defaultOrientation, w, h, defaultPPU);
        /*
		initLock = true;
		this.setPosition(origin);
		this.setFocus(focus);
		this.setOrientation(defaultOrientation);
		this.setWindow(w,h);
		this.setPPU(defaultPPU);
		delta = false;
		initLock = false;
		*/
    }

    /**
     * Note that ppu contains the number of desired pixels per unit within
     *  your frame. Actual resolution is a simple multiplication of (width by
     *  ppu) by (height by ppu).
     */
    @org.checkerframework.dataflow.qual.Impure
    public Camera(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector origin, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector focus, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector up,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double width,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double height,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int ppu) {
        initLock = true;
        this.setPosition(origin);
        this.setFocus(focus);
        this.setOrientation(up);
        this.setWindow(width, height);
        this.setPPU(ppu);
        delta = false;
        initLock = false;
    }

    /**
     * Creates a Camera object that is an exact copy of the calling object.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera dup() {
        Camera c = new Camera(position, focus, up, width, height, ppu);
        if (delta)
            c.setDelta(d);
        return c;
    }

    /**
     * Resets window and resolution if position or orientation has changed.
     */
    @org.checkerframework.dataflow.qual.Impure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera reset() {
        initLock = true;
        this.setPosition(position);
        this.setFocus(focus);
        this.setOrientation(up);
        this.setWindow(width, height);
        this.setPPU(ppu);
        initLock = false;
        return this;
    }

    /**
     * Resets the amount of camera position delta to zero.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera resetDelta() {
        delta = false;
        return this;
    }

    /**
     * Sets the camera position delta to specified amount.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera setDelta( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double D) {
        //reset if close enough to zero
        if (D < 0.0000001) {
            return this.resetDelta();
        }
        delta = true;
        d = D;
        return this;
    }

    /**
     * Sets camera orientation by specifying what direction you want "up" to
     *  be. If orientation and camera direction are close to parallel then the
     *  orientatin becomes ambiguous, so a default orientation is chosen. The
     *  defaults are <0,1,0> and <1,0,0> in that order.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera setOrientation(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector newUpVector) {
        Vector u = newUpVector.dup();
        // make sure our forward and up aren't parallel
        // or else Bad Stuff (tm)
        right = forward.cross(u);
        if (right.len() < 0.00001) {
            // try to use +y as orientation
            u.setxyz(0.0, 1.0, 0.0);
            right = forward.cross(u);
            if (right.len() < 0.00001) {
                //use +x as orientation
                u.setxyz(1.0, 0.0, 0.0);
                right = forward.cross(u);
            }
        }
        right.norm();
        up = right.cross(forward).norm();
        return this;
    }

    /**
     * Sets camera Pixels Per Unit, a measure of pixel density. Actual image
     *  resolution depends on the size of the focal window.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera setPPU( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int p) {
        ppu = p;
        xstep = right.dup().scale(1.0 / p);
        ystep = up.dup().scale(-1.0 / p);
        return this;
    }

    /**
     * Gets current gixels per unit setting.
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getPPU() {
        return ppu;
    }

    /**
     * Gets current focal window width setting.
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double getWidth() {
        return width;
    }

    /**
     * Gets current focal window height setting
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double getHeight() {
        return height;
    }

    /**
     * Gets how many pixels wide the image will be with current settings.
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getPixelsWide() {
        return (int) (ppu * width);
    }

    /**
     * Gets how many pixels tall the image will be with current settings.
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getPixelsTall() {
        return (int) (ppu * height);
    }

    /**
     * Sets focal window width and height.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera setWindow( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double w,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double h) {
        width = w;
        height = h;
        corner = focus.dup().trans(up, h / 2.0).trans(right, w / -2.0);
        return this;
    }

    /**
     * Sets camera focal point. Use of this function changes which direction
     *  the camera is pointing. The focal window will be centered on this point
     *  and be perpendicular to the vector from the camera position to the
     *  focal point.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera setFocus(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector f) {
        forward = f.sub(position).norm();
        focus = f.dup();
        if (!initLock)
            return this.reset();
        else
            return this;
    }

    /**
     * Sets camera position. Use of this function will not change the focal
     *  point, but will change the perspective upon it.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera setPosition(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector p) {
        position = p.dup();
        if (!initLock) {
            this.setFocus(focus);
            this.reset();
        }
        return this;
    }

    /**
     * This funtion returns a ray from the camera position (plus a origin
     *  delta if one is set) in the direction of a random point within the
     *  specified pixel. Values outside of the focal window are completely
     *  valid parameters.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Ray getRay( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int y) {
        Vector or, di;
        double dx = x + Math.random();
        double dy = y + Math.random();
        or = position.dup();
        if (delta)
            or.delta(d);
        di = corner.dup().trans(xstep, dx).trans(ystep, dy).sub(or);
        return new Ray(or, di);
    }
}
