package jatrace;

/**
 * This class provides a means to keep track of a collection of objects with
 *  the Body interface through a linked list. Each link will have a unique ID
 *  integer that can be used to find and or remove it from the collection.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class LinkedBody {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable LinkedBody nextLink;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable LinkedBody prevLink;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Body body;

    /**
     * Instantiates a new link containing the specified Body interface.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public LinkedBody(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Body b) {
        body = b;
        nextLink = null;
        prevLink = null;
    }

    /**
     * Fetches a reference to the Body object this link wraps.
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Body b() {
        return body;
    }

    /**
     * Fetches the next link down from caller. A null reference will be
     *  returned if the caller is the tail object.
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedBody next() {
        return nextLink;
    }

    /**
     * Removes object from its linked list and inserts it before the argument.
     *  This function safely handles null references.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void insertBefore(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedBody lb) {
        //clear this objects ends
        remove();
        if (lb != null) {
            prevLink = lb.prevLink;
            lb.prevLink = this;
            nextLink = lb;
            if (prevLink != null) {
                prevLink.nextLink = this;
            }
        }
    }

    /**
     * Removes object from its linked list and inserts it after the argument.
     *  This function safely handles null references.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void insertAfter(LinkedBody lb) {
        remove();
        if (lb != null) {
            nextLink = lb.nextLink;
            lb.nextLink = this;
            prevLink = lb;
            if (nextLink != null) {
                nextLink.prevLink = this;
            }
        }
    }

    /**
     * Removes object from linked list, linking the ends together.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void remove() {
        if (prevLink != null) {
            prevLink.nextLink = nextLink;
        }
        if (nextLink != null) {
            nextLink.prevLink = null;
        }
        nextLink = null;
        prevLink = null;
    }
}
