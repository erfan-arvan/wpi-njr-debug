package jatrace;

/**
 * This class is mostly a wrapper for the World and Camera classes and
 *  provides methods to accomplish the actual tracing of rays and subsequent
 *  image rendering.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Tracer {

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull World world;

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Camera camera;

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull myImage image;

    protected int ppu, width, height;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int depth = 8;

    /**
     * Initializes new Tracer object to given world and camera. Modification
     *  of the World and Camera objects after Tracer instantiation can be done
     *  through the normal World and Camera class methods.
     */
    @org.checkerframework.dataflow.qual.Impure
    public Tracer(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull World w, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera c) {
        this.setWorld(w);
        this.setCamera(c);
        this.image = null;
    }

    /**
     * Initializes new Tracer object with default World and Camera objects.
     *  References to the World and Camera objects can subsequently be obtained
     *  through the getWorld() and getCamera() methods.
     */
    @org.checkerframework.dataflow.qual.Impure
    public Tracer() {
        this.setWorld();
        this.setCamera();
        this.image = null;
    }

    /**
     * Sets how many reflections are calculated recursively per sample.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer setSampleDepth( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int depth) {
        this.depth = depth;
        return this;
    }

    /**
     * Calling object will trace within a default world.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer setWorld() {
        return this.setWorld(new World());
    }

    /**
     * Calling object will trace within the given world.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer setWorld(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull World w) {
        this.world = w;
        return this;
    }

    /**
     * Calling object will trace with default Camera settings.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer setCamera() {
        return this.setCamera(new Camera());
    }

    /**
     * Calling object will trace with given Camera settings.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer setCamera(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Camera c) {
        this.camera = c;
        ppu = c.getPPU();
        width = (int) (ppu * c.getWidth());
        height = (int) (ppu * c.getHeight());
        return this;
    }

    /**
     * Calling object will draw the its World object from the perspective of
     *  its Camera object. This is accomplished by tracing given number of rays
     *  from the camera origin through each pixel in the image. Dealiasing
     *  depends on the number of passes per pixel. Depth of Field blur is
     *  accomplished by adding a origin delta to the Camera object.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer draw( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int passes) {
        if (world == null) {
            this.setWorld();
        }
        if (camera == null) {
            this.setCamera();
        }
        double passDim = 1.0 / passes;
        image = new myImage(width, height);
        Color c = new Color();
        for (int y = 0; y < height; y++) {
            if (y % 100 == 0) {
                System.out.println("line " + y + " of " + height + "done");
            }
            for (int x = 0; x < width; x++) {
                c.setRGBA(0.0, 0.0, 0.0, 0.0);
                for (int p = 0; p < passes; p++) {
                    c = c.add(world.sample(camera.getRay(x, y), depth));
                }
                // END PIXEL SAMPLING
                c.dim(passDim);
                image.setPixel(x, y, c);
            }
            // END OF SCANLINE
            // get time info
            // print line execution time
        }
        // END IMAGE RENDER
        return this;
    }

    // END DRAW METHOD
    /**
     * Calls draw(8).
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer draw() {
        return this.draw(8);
    }

    /**
     * Writes a drawn image with a default name to disk.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer write() {
        String filename = "trace-" + width + "x" + height + ".png";
        return this.write(filename);
    }

    /**
     * Writes a drawn image into a file of the given name. Note that this will
     *  fail fatally on an IOException. See Camera.write().
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tracer write(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String filename) {
        System.out.println("Printing to file '" + filename + "'");
        image.write(filename);
        System.out.println("All done!");
        return this;
    }
}
