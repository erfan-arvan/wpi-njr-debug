package jatrace.gui;

import jatrace.gui.body.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Gui extends JFrame {

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void run() {
                new Gui();
            }
        });
    }

    @org.checkerframework.dataflow.qual.Impure
    private Gui() {
        super("jatrace");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setupContent();
        getContentPane().add(content);
        pack();
        setVisible(true);
        repaintAll();
    }

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JPanel content;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull JPanel footer;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull JPanel divider;

    @org.checkerframework.dataflow.qual.Impure
    private void setupContainers() {
        content = new JPanel(new BorderLayout());
        content.setPreferredSize(new Dimension(600, 600));
        content.setOpaque(true);
        footer = new JPanel(new BorderLayout());
        footer.setPreferredSize(new Dimension(0, 200));
        footer.setOpaque(true);
        divider = new JPanel(new GridLayout(1, 2));
        divider.setPreferredSize(new Dimension(0, 200));
        divider.setOpaque(true);
    }

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull BodyPanel bodies;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull JPanel preview;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull JPanel skies;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull JPanel camera;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull JPanel render;

    @org.checkerframework.dataflow.qual.Impure
    private void setupContent() {
        setupContainers();
        bodies = new BodyPanel();
        content.add(bodies, BorderLayout.LINE_START);
        preview = new JPanel();
        preview.setPreferredSize(new Dimension(400, 400));
        preview.add(content, BorderLayout.CENTER);
        skies = new JPanel();
        skies.setPreferredSize(new Dimension(200, 200));
        footer.add(skies, BorderLayout.LINE_START);
        camera = new JPanel();
        camera.setPreferredSize(new Dimension(200, 200));
        divider.add(camera);
        render = new JPanel();
        render.setPreferredSize(new Dimension(200, 200));
        divider.add(render);
        footer.add(divider, BorderLayout.CENTER);
        content.add(footer, BorderLayout.PAGE_END);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void repaintAll() {
        render.repaint();
        camera.repaint();
        divider.repaint();
        skies.repaint();
        footer.repaint();
        preview.repaint();
        bodies.repaint();
        content.repaint();
    }
}
