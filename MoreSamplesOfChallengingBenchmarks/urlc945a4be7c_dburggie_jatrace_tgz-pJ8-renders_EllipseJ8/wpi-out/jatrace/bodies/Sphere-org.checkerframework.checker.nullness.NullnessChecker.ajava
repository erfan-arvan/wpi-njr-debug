package jatrace.bodies;

import jatrace.*;

/**
 * A Body interface implementing class describing a mathematical sphere.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Sphere extends Body {

    protected double radius, RR;

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector position;

    /**
     * Default constructor: center (0.0,0.0,0.0); radius 1; Color gray;
     */
    @org.checkerframework.dataflow.qual.Impure
    public Sphere() {
        super();
        setColor(new Color(0.3, 0.3, 0.3));
        setRadius(1.0);
        position = getPosition();
    }

    /**
     * Sphere constructor with given center, radius, and color.
     */
    @org.checkerframework.dataflow.qual.Impure
    public Sphere(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector p,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double r, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Color c) {
        super();
        setPosition(p);
        setColor(c);
        setRadius(r);
        position = getPosition();
    }

    /**
     * Sets radius of sphere.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sphere setRadius( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double r) {
        radius = r;
        RR = r * r;
        return this;
    }

    /**
     * Returns vector normal to sphere through the given point.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector getNormal(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sphere this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector point) {
        return point.sub(position).norm();
    }

    /**
     * Returns distance to intersection with sphere along ray.
     */
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double intersection(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sphere this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Ray ray) {
        Vector S;
        double SD, SS;
        S = ray.o().sub(position);
        SD = S.dot(ray.d());
        SS = S.dot(S);
        if (SS > 1000000.0)
            return -1.0;
        double radical = SD * SD + RR - SS;
        if (radical < 0.0) {
            return -1.0;
        } else
            radical = Math.sqrt(radical);
        double hit = -1 * SD - radical;
        if (hit < 0.0001) {
            hit = -1 * SD + radical;
            if (hit < 0.0001) {
                return -1.0;
            } else
                return hit;
        } else
            return hit;
    }
}
