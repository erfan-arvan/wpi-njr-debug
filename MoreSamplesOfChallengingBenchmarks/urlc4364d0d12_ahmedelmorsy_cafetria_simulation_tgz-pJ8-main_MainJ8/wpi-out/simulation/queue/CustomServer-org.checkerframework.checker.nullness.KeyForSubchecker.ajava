package simulation.queue;

import simulation.global.Event;
import simulation.global.EventsQueue;
import simulation.global.SimulationClk;
import simulation.global.Statistics;
import simulation.queue.QueueSystem.QueueEntry;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class CustomServer extends Server {

    private   int finishTime;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public CustomServer( String name) {
        super(name);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isBusy( CustomServer this) {
        if (SimulationClk.clock > finishTime)
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void serve( CustomServer this, final  Customer customer, final  Event e) {
        int serviceTime = customer.getAccumlatedTime();
        finishTime = SimulationClk.clock + serviceTime;
        EventsQueue.enqueue(finishTime, new Event() {

            @org.checkerframework.dataflow.qual.Impure
            public void execute() {
                e.execute();
                QueueEntry next;
                if ((next = getQueueSystem().dequeue()) != null) {
                    Statistics.trace.log("[" + SimulationClk.clock + "][" + getName() + "][Service]" + next.customer.getId());
                    serve(next.customer, next.afterService);
                    Statistics.CustomerQuitQueue(next.customer, getName());
                } else {
                    finishTime = -1;
                }
            }

            @org.checkerframework.dataflow.qual.Pure
            public  String getDescription() {
                return "Cashier event for customer" + customer.getId();
            }
        });
    }
}
