package simulation.global;

import java.util.PriorityQueue;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class EventsQueue {

    private static  PriorityQueue<Node> queue = new PriorityQueue<Node>();

    @org.checkerframework.dataflow.qual.Impure
    public static void enqueue(  int time,  Event event) {
        Node n = new Node();
        n.time = time;
        n.e = event;
        queue.add(n);
        System.out.println("[EventsQueue] an event is added for time " + time);
    }

    @org.checkerframework.dataflow.qual.Pure
    public static   int getSize() {
        return queue.size();
    }

    @org.checkerframework.dataflow.qual.Impure
    public static   int peekTime() {
        if (queue.size() == 0)
            return Integer.MAX_VALUE;
        return queue.peek().time;
    }

    private static class Node implements Comparable<Node> {

        public   int time;

        public  Event e;

        @org.checkerframework.dataflow.qual.Pure
        public   int compareTo( Node this,  Node arg0) {
            if (this.time < arg0.time)
                return -1;
            if (this.time > arg0.time)
                return 1;
            return 0;
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void executeEvent() {
        SimulationClk.clock = peekTime();
        Event e = queue.poll().e;
        System.out.println("[" + SimulationClk.clock + "] " + e.getDescription());
        e.execute();
    }
}
