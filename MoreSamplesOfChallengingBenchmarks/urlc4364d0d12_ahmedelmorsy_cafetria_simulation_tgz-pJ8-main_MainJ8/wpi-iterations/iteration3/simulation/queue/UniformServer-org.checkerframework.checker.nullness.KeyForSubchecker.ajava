package simulation.queue;

import java.util.Random;
import simulation.global.Event;
import simulation.global.EventsQueue;
import simulation.global.SimulationClk;
import simulation.global.Statistics;
import simulation.queue.QueueSystem.QueueEntry;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class UniformServer extends Server {

    private   int serviceTimeMin;

    private   int serviceTimeMax;

    private   int accumelatedTimeMin;

    private   int accumelatedTimeMax;

    private   int finishTime;

    private  Random stGen;

    private  Random actGen;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public UniformServer( String name,   int stMin,   int stMax,   int actMin,   int actMax,   int emp) {
        super(name);
        this.serviceTimeMin = stMin / emp;
        this.serviceTimeMax = stMax / emp;
        this.accumelatedTimeMin = actMin;
        this.accumelatedTimeMax = actMax;
        this.finishTime = -1;
        stGen = new Random();
        actGen = new Random();
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isBusy( UniformServer this) {
        if (SimulationClk.clock > finishTime)
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void serve( UniformServer this,  Customer customer, final  Event e) {
        int serviceTime = stGen.nextInt(serviceTimeMax - serviceTimeMin) + serviceTimeMin;
        finishTime = SimulationClk.clock + serviceTime;
        int accTime = actGen.nextInt(accumelatedTimeMax - accumelatedTimeMin) + accumelatedTimeMin;
        customer.accumlateTime(accTime);
        EventsQueue.enqueue(finishTime, new Event() {

            @org.checkerframework.dataflow.qual.Impure
            public void execute() {
                e.execute();
                QueueEntry next;
                if ((next = getQueueSystem().dequeue()) != null) {
                    Statistics.console.log("Customer " + next.customer.getId() + " left queue and is going to be served");
                    Statistics.trace.log("[" + SimulationClk.clock + "][" + getName() + "][Service]" + next.customer.getId());
                    Statistics.CustomerQuitQueue(next.customer, getName());
                    serve(next.customer, next.afterService);
                } else {
                    finishTime = -1;
                }
            }

            @org.checkerframework.dataflow.qual.Pure
            public  String getDescription() {
                return "Customer uniform server event";
            }
        });
    }
}
