/**
 * ****************************************************************************
 *  Copyright (c) 2011, Daniel Murphy
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *  	* Redistributions of source code must retain the above copyright notice,
 *  	  this list of conditions and the following disclaimer.
 *  	* Redistributions in binary form must reproduce the above copyright notice,
 *  	  this list of conditions and the following disclaimer in the documentation
 *  	  and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 * ****************************************************************************
 */
package org.jbox2d.common;

/**
 * Orientated bounding box viewport transform
 * @author Daniel Murphy
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class OBBViewportTransform implements IViewportTransform {

    public static class OBB {

        public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Mat22 R = new Mat22();

        public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 center = new Vec2();

        public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 extents = new Vec2();
    }

    protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBB box = new OBB();

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean yFlip = false;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Mat22 yFlipMat = new Mat22(1, 0, 0, -1);

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Mat22 yFlipMatInv = yFlipMat.invert();

    @org.checkerframework.dataflow.qual.Impure
    public OBBViewportTransform() {
        box.R.setIdentity();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void set(OBBViewportTransform vpt) {
        box.center.set(vpt.box.center);
        box.extents.set(vpt.box.extents);
        box.R.set(vpt.box.R);
        yFlip = vpt.yFlip;
    }

    /**
     * @see IViewportTransform#setCamera(float, float, float)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setCamera(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float y,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float scale) {
        box.center.set(x, y);
        Mat22.createScaleTransform(scale, box.R);
    }

    /**
     * @see IViewportTransform#getExtents()
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 getExtents(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this) {
        return box.extents;
    }

    /**
     * @see IViewportTransform#setExtents(Vec2)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setExtents(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argExtents) {
        box.extents.set(argExtents);
    }

    /**
     * @see IViewportTransform#setExtents(float, float)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setExtents(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float argHalfWidth,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float argHalfHeight) {
        box.extents.set(argHalfWidth, argHalfHeight);
    }

    /**
     * @see IViewportTransform#getCenter()
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 getCenter(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this) {
        return box.center;
    }

    /**
     * @see IViewportTransform#setCenter(Vec2)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setCenter(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argPos) {
        box.center.set(argPos);
    }

    /**
     * @see IViewportTransform#setCenter(float, float)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setCenter(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float y) {
        box.center.set(x, y);
    }

    /**
     * gets the transform of the viewport, transforms around the center.
     * Not a copy.
     * @return
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Mat22 getTransform() {
        return box.R;
    }

    /**
     * Sets the transform of the viewport.  Transforms about the center.
     * @param transform
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setTransform(Mat22 transform) {
        box.R.set(transform);
    }

    /**
     * Multiplies the obb transform by the given transform
     * @param argTransform
     */
    @org.checkerframework.dataflow.qual.Impure
    public void mulByTransform(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Mat22 argTransform) {
        box.R.mulLocal(argTransform);
    }

    /**
     * @see IViewportTransform#isYFlip()
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isYFlip(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this) {
        return yFlip;
    }

    /**
     * @see IViewportTransform#setYFlip(boolean)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setYFlip(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean yFlip) {
        this.yFlip = yFlip;
    }

    // djm pooling
    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Mat22 inv = new Mat22();

    /**
     * @see IViewportTransform#getScreenVectorToWorld(Vec2, Vec2)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void getScreenVectorToWorld(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argScreen, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argWorld) {
        inv.set(box.R);
        inv.invertLocal();
        inv.mulToOut(argScreen, argWorld);
        if (yFlip) {
            yFlipMatInv.mulToOut(argWorld, argWorld);
        }
    }

    /**
     * @see IViewportTransform#getWorldVectorToScreen(Vec2, Vec2)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void getWorldVectorToScreen(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argWorld, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argScreen) {
        box.R.mulToOut(argWorld, argScreen);
        if (yFlip) {
            yFlipMatInv.mulToOut(argScreen, argScreen);
        }
    }

    /**
     * @see IViewportTransform#getWorldToScreen(Vec2, Vec2)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void getWorldToScreen(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argWorld, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argScreen) {
        argScreen.set(argWorld);
        argScreen.subLocal(box.center);
        box.R.mulToOut(argScreen, argScreen);
        if (yFlip) {
            yFlipMat.mulToOut(argScreen, argScreen);
        }
        argScreen.addLocal(box.extents);
    }

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Mat22 inv2 = new Mat22();

    /**
     * @see IViewportTransform#getScreenToWorld(Vec2, Vec2)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void getScreenToWorld(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull OBBViewportTransform this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argScreen, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 argWorld) {
        argWorld.set(argScreen);
        argWorld.subLocal(box.extents);
        box.R.invertToOut(inv2);
        inv2.mulToOut(argWorld, argWorld);
        if (yFlip) {
            yFlipMatInv.mulToOut(argWorld, argWorld);
        }
        argWorld.addLocal(box.center);
    }
}
