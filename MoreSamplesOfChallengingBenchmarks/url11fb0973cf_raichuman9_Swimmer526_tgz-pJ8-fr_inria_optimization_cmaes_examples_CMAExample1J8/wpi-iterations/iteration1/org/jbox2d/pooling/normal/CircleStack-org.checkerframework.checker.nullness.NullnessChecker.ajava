/**
 * ****************************************************************************
 *  Copyright (c) 2011, Daniel Murphy
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *  	* Redistributions of source code must retain the above copyright notice,
 *  	  this list of conditions and the following disclaimer.
 *  	* Redistributions in binary form must reproduce the above copyright notice,
 *  	  this list of conditions and the following disclaimer in the documentation
 *  	  and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 * ****************************************************************************
 */
package org.jbox2d.pooling.normal;

import java.lang.reflect.Array;
import org.jbox2d.pooling.IOrderedStack;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class CircleStack<E> implements IOrderedStack<E> {

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Logger log = LoggerFactory.getLogger(CircleStack.class);

    private final E @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] pool;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int index;

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int size;

    private final E @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] container;

    @org.checkerframework.dataflow.qual.Impure
    public CircleStack(Class<E> argClass, int argStackSize, int argContainerSize) {
        size = argStackSize;
        pool = (E[]) Array.newInstance(argClass, argStackSize);
        for (int i = 0; i < argStackSize; i++) {
            try {
                pool[i] = argClass.newInstance();
            } catch (InstantiationException e) {
                log.error("Error creating pooled object " + argClass.getSimpleName(), e);
                assert (false) : "Error creating pooled object " + argClass.getCanonicalName();
            } catch (IllegalAccessException e) {
                log.error("Error creating pooled object " + argClass.getSimpleName(), e);
                assert (false) : "Error creating pooled object " + argClass.getCanonicalName();
            }
        }
        index = 0;
        container = (E[]) Array.newInstance(argClass, argContainerSize);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final E pop(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CircleStack<E> this) {
        index++;
        if (index >= size) {
            index = 0;
        }
        return pool[index];
    }

    @org.checkerframework.dataflow.qual.Impure
    public final E @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] pop(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CircleStack<E> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int argNum) {
        assert (argNum <= container.length) : "Container array is too small";
        if (index + argNum < size) {
            System.arraycopy(pool, index, container, 0, argNum);
            index += argNum;
        } else {
            int overlap = (index + argNum) - size;
            System.arraycopy(pool, index, container, 0, argNum - overlap);
            System.arraycopy(pool, 0, container, argNum - overlap, overlap);
            index = overlap;
        }
        return container;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void push(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CircleStack<E> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int argNum) {
    }
}
