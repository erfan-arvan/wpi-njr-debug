/**
 * ****************************************************************************
 *  Copyright (c) 2011, Daniel Murphy All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted
 *  provided that the following conditions are met: * Redistributions of source code must retain the
 *  above copyright notice, this list of conditions and the following disclaimer. * Redistributions
 *  in binary form must reproduce the above copyright notice, this list of conditions and the
 *  following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 *  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * ****************************************************************************
 */
package ubc.swim.gui;

import java.awt.AWTError;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import javax.swing.JPanel;
import org.jbox2d.callbacks.DebugDraw;
import org.jbox2d.common.Mat22;
import org.jbox2d.common.OBBViewportTransform;
import org.jbox2d.common.Vec2;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ubc.swim.tests.SwimTest;

/**
 * Adapted from org.jbox2d.testbed.framework.j2d.TestPanelJ2D by Daniel Murphy
 *
 * @author Ben Humberston
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class SwimWorldPanel extends JPanel implements SwimPanel {

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Logger log = LoggerFactory.getLogger(SwimWorldPanel.class);

    public static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INIT_WIDTH = 700;

    public static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int INIT_HEIGHT = 700;

    private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float ZOOM_OUT_SCALE = .95f;

    private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float ZOOM_IN_SCALE = 1.05f;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Graphics2D dbg = null;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Image dbImage = null;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int panelWidth;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int panelHeight;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimModel model;

    private final @org.checkerframework.checker.initialization.qual.UnderInitialization(ubc.swim.gui.SwimDraw.class) @org.checkerframework.checker.nullness.qual.NonNull SwimDraw draw;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vec2 dragginMouse = new Vec2();

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean drag = false;

    @org.checkerframework.dataflow.qual.Impure
    public SwimWorldPanel(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimModel argModel) {
        setBackground(Color.black);
        draw = new SwimDraw(this);
        model = argModel;
        updateSize(INIT_WIDTH, INIT_HEIGHT);
        setPreferredSize(new Dimension(INIT_WIDTH, INIT_HEIGHT));
        addMouseWheelListener(new MouseWheelListener() {

            private final Vec2 oldCenter = new Vec2();

            private final Vec2 newCenter = new Vec2();

            private final Mat22 upScale = Mat22.createScaleTransform(ZOOM_IN_SCALE);

            private final Mat22 downScale = Mat22.createScaleTransform(ZOOM_OUT_SCALE);

            public void mouseWheelMoved(MouseWheelEvent e) {
                DebugDraw d = draw;
                int notches = e.getWheelRotation();
                SwimTest currTest = model.getCurrTest();
                if (currTest == null) {
                    return;
                }
                OBBViewportTransform trans = (OBBViewportTransform) d.getViewportTranform();
                oldCenter.set(model.getCurrTest().getWorldMouse());
                // Change the zoom and clamp it to reasonable values - can't clamp now.
                if (notches < 0) {
                    trans.mulByTransform(upScale);
                    currTest.setCachedCameraScale(currTest.getCachedCameraScale() * ZOOM_IN_SCALE);
                } else if (notches > 0) {
                    trans.mulByTransform(downScale);
                    currTest.setCachedCameraScale(currTest.getCachedCameraScale() * ZOOM_OUT_SCALE);
                }
                d.getScreenToWorldToOut(model.getMouse(), newCenter);
                Vec2 transformedMove = oldCenter.subLocal(newCenter);
                d.getViewportTranform().setCenter(d.getViewportTranform().getCenter().addLocal(transformedMove));
                currTest.setCachedCameraPos(d.getViewportTranform().getCenter());
            }
        });
        addMouseListener(new MouseAdapter() {

            public void mousePressed(MouseEvent e) {
                dragginMouse.set(e.getX(), e.getY());
                drag = e.getButton() == MouseEvent.BUTTON3;
            }
        });
        addMouseMotionListener(new MouseMotionAdapter() {

            public void mouseDragged(MouseEvent e) {
                if (!drag) {
                    return;
                }
                SwimTest currTest = model.getCurrTest();
                if (currTest == null) {
                    return;
                }
                Vec2 diff = new Vec2(e.getX(), e.getY());
                diff.subLocal(dragginMouse);
                currTest.getDebugDraw().getViewportTranform().getScreenVectorToWorld(diff, diff);
                currTest.getDebugDraw().getViewportTranform().getCenter().subLocal(diff);
                dragginMouse.set(e.getX(), e.getY());
            }
        });
        addComponentListener(new ComponentAdapter() {

            public void componentResized(ComponentEvent e) {
                updateSize(getWidth(), getHeight());
                dbImage = null;
            }
        });
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DebugDraw getDebugDraw(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimWorldPanel this) {
        return draw;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Image getBufferedImage(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimWorldPanel this) {
        return dbImage;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Graphics2D getDBGraphics() {
        return dbg;
    }

    @org.checkerframework.dataflow.qual.Impure
    private void updateSize( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int argWidth,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int argHeight) {
        panelWidth = argWidth;
        panelHeight = argHeight;
        draw.getViewportTranform().setExtents(argWidth / 2, argHeight / 2);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void render(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimWorldPanel this) {
        if (dbImage == null) {
            log.debug("dbImage is null, creating a new one");
            if (panelWidth <= 0 || panelHeight <= 0) {
                return;
            }
            dbImage = createImage(panelWidth, panelHeight);
            if (dbImage == null) {
                log.error("dbImage is still null, ignoring render call");
                return;
            }
            dbg = (Graphics2D) dbImage.getGraphics();
        }
        dbg.setColor(Color.black);
        dbg.fillRect(0, 0, panelWidth, panelHeight);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void paintScreen(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimWorldPanel this) {
        try {
            Graphics g = this.getGraphics();
            if ((g != null) && dbImage != null) {
                g.drawImage(dbImage, 0, 0, null);
                Toolkit.getDefaultToolkit().sync();
                g.dispose();
            }
        } catch (AWTError e) {
            log.error("Graphics context error", e);
        }
    }
}
