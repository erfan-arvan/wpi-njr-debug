package ubc.swim.world.trajectory;

import org.jbox2d.dynamics.joints.RevoluteJoint;

/**
 * Provides a time/phase dependent value that is target for some
 * degree of freedom of character
 * @author Ben Humberston
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public abstract class RefTrajectory {

    //optional joint associated with this trajectory
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull RevoluteJoint joint;

    /**
     * Returns current reference value, given current time
     * @param runtime
     * @return
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float getValue( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float time);

    /**
     * Optionally stores a joint associated with this trajectory.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setJoint(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RevoluteJoint joint) {
        this.joint = joint;
    }

    /**
     * Returns stored joint associated with this trajectory
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RevoluteJoint getJoint() {
        return joint;
    }
}
