package ubc.swim.optimization;

import java.util.ArrayList;
import java.util.List;
import org.jbox2d.dynamics.Body;
import ubc.swim.gui.SwimSettings;
import ubc.swim.world.characters.SwimCharacter;
import ubc.swim.world.scenario.Scenario;
import ubc.swim.world.scenario.ScenarioLibrary;

/**
 * Basic function for scoring fitness of virtual swimmer control strategies
 *
 * @author Ben Humberston
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class SwimFitnessFunctionA extends SwimFitnessFunction {

    protected static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float TWO_PI = (float) (2 * Math.PI);

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String charID;

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Scenario scenario;

    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float goalSpeed = 0.2f;

    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float goalDisplacement = 0.0f;

    //5 seconds
    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float maxRuntime = 5.0f;

    //Weight terms (assigned default vals)
    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float speedTermWeight = 10.0f;

    //off by default; some tests use this rather than speed
    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float displacementTermWeight = 0.0f;

    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float energyTermWeight = 1.0f;

    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float rootAngleTermWeight = 1.0f;

    /**
     * Creates a new fitness function that will use a character
     * with specified identifier
     * @param charName
     */
    @org.checkerframework.dataflow.qual.Impure
    public SwimFitnessFunctionA(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String charID) {
        this.charID = charID;
    }

    /**
     * Set target horizontal speed that is used as swimmer's goal
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setGoalSpeed( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float val) {
        this.goalSpeed = val;
    }

    /**
     * Set target horizontal displacement that is used as swimmer's goal
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setGoalDisplacement( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float val) {
        this.goalDisplacement = val;
    }

    /**
     * Set how long simulation is run in order to gather cost data
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setMaxRuntime( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float val) {
        this.maxRuntime = val;
    }

    /**
     * Sets the weight assigned to the horizontal speed cost term
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setSpeedTermWeight( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float val) {
        this.speedTermWeight = val;
    }

    /**
     * Sets the weight assigned to the horizontal displacement error cost term
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setDisplacementErrorTermWeight( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float val) {
        this.displacementTermWeight = val;
    }

    /**
     * Sets the weight assigned to the total energy usage cost term
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setEnergyTermWeight( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float val) {
        this.energyTermWeight = val;
    }

    /**
     * Sets the weight assigned to the cost term for deviation of the character root body from its original angle
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setRootAngleTermWeight( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull float val) {
        this.rootAngleTermWeight = val;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getNumControlDimensions(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimFitnessFunctionA this) {
        //Not the most efficient solution, but oh well...
        SwimCharacter character = ScenarioLibrary.getCharacterByID(charID);
        return character.getNumControlDimensions();
    }

    /**
     * Returns numeric fitness score for given control strategy when used
     * by swimmer character.
     */
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimFitnessFunctionA this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        //For now, just recreate complete scenario (don't try to reset)
        List<String> charIDs = new ArrayList<String>();
        charIDs.add(charID);
        scenario = ScenarioLibrary.getBasicScenario(charIDs);
        character = scenario.getCharacters().get(0);
        character.setControlParams(x);
        Body rootBody = character.getRootBody();
        float rootAngleOrig = rootBody.getAngle();
        float evaluation = 0.0f;
        float time = 0.0f;
        //TODO: run for 5 seconds, assign bad score if no motion;
        //otherwise, run 5 more seconds and score based on that? May help long term stroke stability
        SwimSettings settings = new SwimSettings();
        float hz = (float) settings.getSetting(SwimSettings.Hz).value;
        float dt = hz > 0f ? 1f / hz : 0;
        while (time < maxRuntime) {
            //Do a single simulation step
            scenario.step(settings, dt);
            //Then, update cost evaluation so far
            //Minimize distance from target speed
            if (speedTermWeight != 0) {
                float speedError = Math.abs(rootBody.getLinearVelocity().x - goalSpeed);
                evaluation += speedTermWeight * speedError;
            }
            //Minimize total applied torques
            if (energyTermWeight != 0) {
                float torquesApplied = Math.abs(character.getPrevTorque());
                evaluation += energyTermWeight * torquesApplied;
            }
            //Minimize root angle rotation outside some threshold value
            if (rootAngleTermWeight != 0) {
                float rootAngleDeviation = (float) Math.abs((rootBody.getAngle() % TWO_PI) - rootAngleOrig);
                if (rootAngleDeviation > SwimCharacter.ROOT_BODY_ANGLE_DEVIATION_THRESHOLD)
                    evaluation += rootAngleTermWeight * rootAngleDeviation;
            }
            time += dt;
        }
        //Alternative locomotion measure...
        //Find how far off final goal displacement the character ended up
        if (displacementTermWeight != 0) {
            float goalDispError = goalDisplacement - rootBody.getPosition().x;
            evaluation += displacementTermWeight * Math.abs(goalDispError);
        }
        return evaluation;
    }

    /**
     * Returns true if given control strategy is allowed
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isFeasible(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SwimFitnessFunctionA this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        return true;
    }
}
