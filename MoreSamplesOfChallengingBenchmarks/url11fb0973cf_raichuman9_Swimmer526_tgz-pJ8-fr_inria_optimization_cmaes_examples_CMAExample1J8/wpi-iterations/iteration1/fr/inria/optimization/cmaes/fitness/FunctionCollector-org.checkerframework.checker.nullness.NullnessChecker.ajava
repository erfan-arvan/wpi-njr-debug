package fr.inria.optimization.cmaes.fitness;

import java.util.Random;

/**
 * one can access the desired fitness function by giving its number
 * in the constructor method. Refer to the source code for the
 * numbers. This class is a stub (and hack) so far.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class FunctionCollector extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    public FunctionCollector( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double function_number,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int flgRotate,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio) {
        actFun = (int) (function_number);
        rotate = flgRotate;
        scaling = axisratio == 0 ? 1. : axisratio;
        if (actFun > maxFuncNumber)
            actFun = 1;
        /* sphere */
        // assign all functions by number here
        funs[0] = new RandFun();
        funs[10] = new Sphere();
        // convex-quadratic
        funs[30] = new Cigar(axisratio == 0 ? 1e3 : scaling);
        funs[40] = new Tablet(axisratio == 0 ? 1e3 : scaling);
        funs[50] = new Elli(axisratio == 0 ? 1e3 : scaling);
        funs[60] = new CigTab(axisratio == 0 ? 1e4 : scaling);
        funs[70] = new TwoAxes(axisratio == 0 ? 1e3 : scaling);
        // uni-modal, well, essentially
        funs[80] = new Rosen();
        funs[90] = new DiffPow();
        funs[91] = new ssDiffPow();
        // multi-modal
        funs[150] = new Rastrigin(scaling, 10);
        funs[160] = new Ackley(scaling);
        //      funs[999]  = new Experimental();
        //      funs[]  = new ();
        //      funs[]  = new ();
    }

    final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int maxFuncNumber = 999;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IObjectiveFunction @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] funs = new IObjectiveFunction[maxFuncNumber + 1];

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int actFun = 0;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int rotate = 0;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double scaling = 1;

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Basis B = new Basis();

    /**
     * implements the fitness function evaluation according to interface {@link IObjectiveFunction}
     */
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FunctionCollector this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        // regard input as imutable, not really Java philosophy
        x = x.clone();
        if (// rotate
        rotate > 0)
            x = B.Rotate(x);
        if (scaling != 1) {
            // scale
            for (int i = 0; i < x.length; ++i) x[i] = Math.pow(10, i / (x.length - 1.)) * x[i];
        }
        return funs[actFun] == null ? funs[0].valueOf(x) : funs[actFun].valueOf(x);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isFeasible(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FunctionCollector this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        // unfortunate code duplication
        //int i;
        //for (i = 0; i < x.length; ++i)
        //	if (x[i] < 0.01)
        //		return false;
        //return true;
        return funs[actFun].isFeasible(x);
    }
}

/**
 * provides rotation of a search point, basis is chosen with constant seed.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class RandFun extends AbstractObjectiveFunction {

    java.util.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Random rand = new java.util.Random(0);

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull RandFun this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = rand.nextDouble();
        return res;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Sphere extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sphere this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = 0;
        for (int i = 0; i < x.length; ++i) res += x[i] * x[i];
        return res;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isFeasible(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Sphere this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        //int i;
        //for (i = 0; i < x.length; ++i)
        //	if (x[i] < 0.01)
        //		return false;
        return true;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Cigar extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    Cigar() {
        this(1e3);
    }

    @org.checkerframework.dataflow.qual.Impure
    Cigar( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio) {
        factor = axisratio * axisratio;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double factor = 1e6;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Cigar this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = x[0] * x[0];
        for (int i = 1; i < x.length; ++i) res += factor * x[i] * x[i];
        return res;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Tablet extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    Tablet() {
        this(1e3);
    }

    @org.checkerframework.dataflow.qual.Impure
    Tablet( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio) {
        factor = axisratio * axisratio;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double factor = 1e6;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tablet this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = factor * x[0] * x[0];
        for (int i = 1; i < x.length; ++i) res += x[i] * x[i];
        return res;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class CigTab extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    CigTab() {
        this(1e4);
    }

    @org.checkerframework.dataflow.qual.Impure
    CigTab( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio) {
        factor = axisratio;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double factor = 1e6;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CigTab this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        int end = x.length - 1;
        double res = x[0] * x[0] / factor + factor * x[end] * x[end];
        for (int i = 1; i < end; ++i) res += x[i] * x[i];
        return res;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class TwoAxes extends AbstractObjectiveFunction {

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double factor = 1e6;

    @org.checkerframework.dataflow.qual.Impure
    TwoAxes() {
    }

    @org.checkerframework.dataflow.qual.Impure
    TwoAxes( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio) {
        factor = axisratio * axisratio;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TwoAxes this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = 0;
        for (int i = 0; i < x.length; ++i) res += (i < x.length / 2 ? factor : 1) * x[i] * x[i];
        return res;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class ElliRotated extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    ElliRotated() {
        this(1e3);
    }

    @org.checkerframework.dataflow.qual.Impure
    ElliRotated( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio) {
        factor = axisratio * axisratio;
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Basis B = new Basis();

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double factor = 1e6;

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ElliRotated this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        x = B.Rotate(x);
        double res = 0;
        for (int i = 0; i < x.length; ++i) res += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
        return res;
    }
}

/**
 * dimensionality must be larger than one
 */
//    public boolean isFeasible(double x[]) {
//    	int i;
//    	for (i = 0; i < x.length; ++i) {
//    		if (x[i] < -0.20 || x[i] > 80)
//    			return false;
//    	}
//    	return true;
//    }
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Elli extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    Elli() {
        this(1e3);
    }

    @org.checkerframework.dataflow.qual.Impure
    Elli( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio) {
        factor = axisratio * axisratio;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double factor = 1e6;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Elli this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = 0;
        for (int i = 0; i < x.length; ++i) res += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
        return res;
    }
}

/**
 * dimensionality must be larger than one
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class DiffPow extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DiffPow this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = 0;
        for (int i = 0; i < x.length; ++i) res += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i / (x.length - 1.));
        return res;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class ssDiffPow extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ssDiffPow this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        return Math.pow(new DiffPow().valueOf(x), 0.25);
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Rosen extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Rosen this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = 0;
        for (int i = 0; i < x.length - 1; ++i) res += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1]) + (x[i] - 1.) * (x[i] - 1.);
        return res;
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Ackley extends AbstractObjectiveFunction {

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio = 1.;

    @org.checkerframework.dataflow.qual.Impure
    Ackley( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axra) {
        axisratio = axra;
    }

    @org.checkerframework.dataflow.qual.Impure
    public Ackley() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Ackley this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double res = 0;
        double res2 = 0;
        double fac = 0;
        for (int i = 0; i < x.length; ++i) {
            fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
            res += fac * fac * x[i] * x[i];
            res2 += Math.cos(2. * Math.PI * fac * x[i]);
        }
        return (20. - 20. * Math.exp(-0.2 * Math.sqrt(res / x.length)) + Math.exp(1.) - Math.exp(res2 / x.length));
    }
}

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Rastrigin extends AbstractObjectiveFunction {

    @org.checkerframework.dataflow.qual.Impure
    Rastrigin() {
        this(1, 10);
    }

    @org.checkerframework.dataflow.qual.Impure
    Rastrigin( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double amplitude) {
        this.axisratio = axisratio;
        this.amplitude = amplitude;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double axisratio = 1;

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double amplitude = 10;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double valueOf(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Rastrigin this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        double fac;
        double res = 0;
        for (int i = 0; i < x.length; ++i) {
            fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
            if (i == 0 && x[i] < 0)
                fac *= 1.;
            res += fac * fac * x[i] * x[i] + amplitude * (1. - Math.cos(2. * Math.PI * fac * x[i]));
        }
        return res;
    }
}

/* Template fitness function 
class fff extends AbstractObjectiveFunction {
    public double valueOf(double[] x) {
        double res = 0;
        for (int i = 0; i < x.length; ++i) {
        }
        return res;
    }
}
*/
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class Basis {

    // usually field names should be lower case
     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull [] @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] B;

    // use not always the same basis
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Random rand = new Random(2);

    @org.checkerframework.dataflow.qual.Impure
     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] Rotate( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] x) {
        GenBasis(x.length);
        double[] y = new double[x.length];
        for (int i = 0; i < x.length; ++i) {
            y[i] = 0;
            for (int j = 0; j < x.length; ++j) y[i] += B[i][j] * x[j];
        }
        return y;
    }

    @org.checkerframework.dataflow.qual.Impure
     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] Rotate(double[][] pop) {
        double[][] y = new double[pop.length][];
        for (int i = 0; i < pop.length; ++i) {
            y[i] = Rotate(pop[i]);
        }
        return y;
    }

    @org.checkerframework.dataflow.qual.Impure
    void GenBasis( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int DIM) {
        if (B != null ? B.length == DIM : false)
            return;
        double sp;
        int i, j, k;
        /* generate orthogonal basis */
        B = new double[DIM][DIM];
        for (i = 0; i < DIM; ++i) {
            /* sample components gaussian */
            for (j = 0; j < DIM; ++j) B[i][j] = rand.nextGaussian();
            /* substract projection of previous vectors */
            for (j = i - 1; j >= 0; --j) {
                for (sp = 0., k = 0; k < DIM; ++k) sp += B[i][k] * B[j][k];
                /* scalar product */
                for (k = 0; k < DIM; ++k) B[i][k] -= sp * B[j][k];
                /* substract */
            }
            /* normalize */
            for (sp = 0., k = 0; k < DIM; ++k) sp += B[i][k] * B[i][k];
            /* squared norm */
            for (k = 0; k < DIM; ++k) B[i][k] /= Math.sqrt(sp);
        }
    }
}
