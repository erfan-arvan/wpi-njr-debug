package frs.hotgammon.tests;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import frs.hotgammon.framework.Color;
import frs.hotgammon.framework.Location;
import frs.hotgammon.common.GameImpl;
import frs.hotgammon.variants.movevalidators.CompleteMoveValidator;
import frs.hotgammon.variants.rolldeterminers.PairSequenceDeterminer;
import frs.hotgammon.variants.turndeterminers.AlternatingTurnDeterminer;
import frs.hotgammon.variants.winnerdeterminers.SixMoveWinnerDeterminer;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class BetaMonTests {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull GameImpl game;

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void setup() {
        game = new GameImpl(new CompleteMoveValidator(), new SixMoveWinnerDeterminer(), new AlternatingTurnDeterminer(), new PairSequenceDeterminer());
        game.newGame();
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void redShouldOnlyMoveTowardRedInnerTable() {
        game.nextTurn();
        game.nextTurn();
        assertTrue(game.move(Location.B1, Location.B4));
        assertFalse(game.move(Location.B4, Location.B1));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void blackShouldOnlyMoveTowardBlackInnerTable() {
        game.nextTurn();
        assertTrue(game.move(Location.R1, Location.R3));
        assertFalse(game.move(Location.R3, Location.R1));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldReportTwoDieLeftBeforeMove() {
        game.nextTurn();
        assertEquals(2, game.diceValuesLeft().length);
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldReportOneDieLeftAfterSingleMove() {
        game.nextTurn();
        assertTrue(game.move(Location.R1, Location.R3));
        assertEquals(1, game.diceValuesLeft().length);
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldReportZeroDieLeftAfterSingleMove() {
        game.nextTurn();
        assertTrue(game.move(Location.R1, Location.R3));
        assertTrue(game.move(Location.R3, Location.R4));
        assertEquals(0, game.diceValuesLeft().length);
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void moveDistanceShouldEqualRoll() {
        game.nextTurn();
        int[] roll = game.diceValuesLeft();
        assertTrue(roll.length == 2);
        Location to = Location.findLocation(game.getPlayerInTurn(), Location.R1, roll[0]);
        assertTrue(game.move(Location.R1, to));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldNotBeAbleToUseSameDieTwice() {
        game.nextTurn();
        assertTrue(game.move(Location.R1, Location.R3));
        assertFalse(game.move(Location.R3, Location.R5));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldSendRedBlotToBar() {
        game.configure(null);
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.BLACK, Location.R1), new GameImpl.Placement(Color.RED, Location.R2) });
        game.nextTurn();
        int prevCountRedBar = game.getCount(Location.R_BAR);
        assertTrue(game.move(Location.R1, Location.R2));
        assertTrue(Color.BLACK == game.getColor(Location.R2));
        assertEquals(1, game.getCount(Location.R2));
        assertEquals(prevCountRedBar + 1, game.getCount(Location.R_BAR));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldSendBlackBlotToBar() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.RED, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B4) });
        game.nextTurn();
        // Will generate 3,4
        game.nextTurn();
        int prevCountRedBar = game.getCount(Location.B_BAR);
        assertTrue(game.move(Location.B1, Location.B4));
        assertTrue(Color.RED == game.getColor(Location.B4));
        assertEquals(1, game.getCount(Location.B4));
        assertEquals(prevCountRedBar + 1, game.getCount(Location.B_BAR));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldRejectRedMoveDueToBlockedPoint() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.RED, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B4), new GameImpl.Placement(Color.BLACK, Location.B4) });
        game.nextTurn();
        game.nextTurn();
        assertFalse(game.move(Location.B1, Location.B4));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldRejectBlackMoveDueToBlockedPoint() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.BLACK, Location.R1), new GameImpl.Placement(Color.RED, Location.R4), new GameImpl.Placement(Color.RED, Location.R4) });
        game.nextTurn();
        assertFalse(game.move(Location.R1, Location.R4));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldMoveBlackOffBarToRedInnerTable() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.BLACK, Location.B_BAR), new GameImpl.Placement(Color.BLACK, Location.B_BAR) });
        game.nextTurn();
        assertTrue(game.move(Location.B_BAR, Location.R1));
        assertTrue(game.move(Location.B_BAR, Location.R2));
        assertEquals(0, game.getCount(Location.B_BAR));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldNotMoveBlackOffBarToRedInnerTable() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.BLACK, Location.B_BAR), new GameImpl.Placement(Color.BLACK, Location.B_BAR), new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R4), new GameImpl.Placement(Color.RED, Location.R4), new GameImpl.Placement(Color.RED, Location.R5), new GameImpl.Placement(Color.RED, Location.R5), new GameImpl.Placement(Color.RED, Location.R6), new GameImpl.Placement(Color.RED, Location.R6) });
        game.nextTurn();
        assertFalse(game.move(Location.B_BAR, Location.R1));
        assertFalse(game.move(Location.B_BAR, Location.R2));
        assertEquals(2, game.getCount(Location.B_BAR));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldNotMoveOtherBlackWhenBlackOnBar() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.BLACK, Location.B_BAR), new GameImpl.Placement(Color.BLACK, Location.B8) });
        game.nextTurn();
        assertFalse(game.move(Location.B8, Location.B9));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldNotMoveOtherRedWhenRedOnBar() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.RED, Location.R_BAR), new GameImpl.Placement(Color.RED, Location.R8) });
        game.nextTurn();
        game.nextTurn();
        assertFalse(game.move(Location.B8, Location.B11));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void redShouldBearOffWithAllCheckersInInnerTable() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R4), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R4) });
        game.nextTurn();
        game.nextTurn();
        assertTrue(game.move(Location.R3, Location.R_BEAR_OFF));
        assertTrue(game.move(Location.R4, Location.R_BEAR_OFF));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void redShouldNotBearOffWithCheckersNotInInnerTable() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R4), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R3), new GameImpl.Placement(Color.RED, Location.R1), new GameImpl.Placement(Color.RED, Location.R2), new GameImpl.Placement(Color.RED, Location.R10) });
        game.nextTurn();
        game.nextTurn();
        assertFalse(game.move(Location.R3, Location.R_BEAR_OFF));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void blackShouldBearOffWithAllCheckersInInnerTable() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.BLACK, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B3), new GameImpl.Placement(Color.BLACK, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B3), new GameImpl.Placement(Color.BLACK, Location.B4), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B3), new GameImpl.Placement(Color.BLACK, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B3), new GameImpl.Placement(Color.BLACK, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B4) });
        game.nextTurn();
        assertTrue(game.move(Location.B2, Location.B_BEAR_OFF));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void blackShouldNotBearOffWithCheckersNotInInnerTable() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.BLACK, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B3), new GameImpl.Placement(Color.BLACK, Location.B4), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B3), new GameImpl.Placement(Color.BLACK, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B3), new GameImpl.Placement(Color.BLACK, Location.B1), new GameImpl.Placement(Color.BLACK, Location.B2), new GameImpl.Placement(Color.BLACK, Location.B10) });
        game.nextTurn();
        assertFalse(game.move(Location.B2, Location.B_BEAR_OFF));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldBearOffWithLessThanDieIfNoOtherMoveAvailable() {
        game.configure(new GameImpl.Placement[] { new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R_BEAR_OFF), new GameImpl.Placement(Color.RED, Location.R2) });
        game.nextTurn();
        game.nextTurn();
        assertTrue(game.getPlayerInTurn() == Color.RED);
        assertTrue(game.move(Location.R2, Location.R_BEAR_OFF));
    }
}
