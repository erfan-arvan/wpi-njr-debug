package assignments.farmer.farmerfactories;

import assignments.farmer.Farmer;
import assignments.farmer.FarmerFactory;
import assignments.farmer.FarmerImpl;
import assignments.farmer.actionstrategies.HarvestStrategy;
import assignments.farmer.actionstrategies.MarketStrategy;
import assignments.farmer.actionstrategies.PlantStrategy;
import assignments.farmer.actionstrategies.PlowStrategy;
import assignments.farmer.actionstrategies.WeedControlStrategy;
import assignments.farmer.actionstrategies.harveststrategies.ConventionalHarvestStrategy;
import assignments.farmer.actionstrategies.marketstrategies.ConventionalMarketStrategy;
import assignments.farmer.actionstrategies.plantstrategies.ConventionalPlantStrategy;
import assignments.farmer.actionstrategies.plowstrategies.ConventionalPlowStrategy;
import assignments.farmer.actionstrategies.weedcontrolstrategies.ConventionalWeedControlStrategy;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class ConventionalFarmerFactory implements FarmerFactory {

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Farmer create(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConventionalFarmerFactory this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String str) {
        FarmerImpl f = new FarmerImpl();
        f.setStrategies(createPlowStrategy(), createPlantStrategy(), createWeedControlStrategy(), createHarvestStrategy(), createMarketStrategy());
        return f;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PlowStrategy createPlowStrategy(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConventionalFarmerFactory this) {
        return new ConventionalPlowStrategy();
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PlantStrategy createPlantStrategy(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConventionalFarmerFactory this) {
        return new ConventionalPlantStrategy();
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull WeedControlStrategy createWeedControlStrategy(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConventionalFarmerFactory this) {
        return new ConventionalWeedControlStrategy();
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull HarvestStrategy createHarvestStrategy(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConventionalFarmerFactory this) {
        return new ConventionalHarvestStrategy();
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MarketStrategy createMarketStrategy(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ConventionalFarmerFactory this) {
        return new ConventionalMarketStrategy();
    }
}
