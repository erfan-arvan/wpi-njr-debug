package minidraw.standard.handlers;

import minidraw.framework.*;
import minidraw.standard.*;
import java.awt.*;
import java.awt.event.MouseEvent;

/**
 * SelectAreaTracker is a tool to select a set of figures using a
 *  rubberband.
 *
 *  This tool is more or less a direct copy from the JHotDraw 5.1 source,
 *  except it is augmented with a selection strategy.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class SelectAreaTracker extends AbstractTool {

    private  Rectangle selectionRectangle;

    protected  RubberBandSelectionStrategy rubberBandSelectionStrategy;

    @org.checkerframework.dataflow.qual.Impure
    public SelectAreaTracker(DrawingEditor editor) {
        this(editor, new StandardRubberBandSelectionStrategy());
    }

    /**
     * define the selection area tracker.
     *      @param rbss the selection strategy to use
     */
    @org.checkerframework.dataflow.qual.Impure
    public SelectAreaTracker( DrawingEditor editor,  RubberBandSelectionStrategy rbss) {
        super(editor);
        rubberBandSelectionStrategy = rbss;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void mouseDown( SelectAreaTracker this,  MouseEvent e,   int x,   int y) {
        // use event coordinates to suppress any kind of
        // transformations like constraining points to a grid
        super.mouseDown(e, e.getX(), e.getY());
        rubberBand(fAnchorX, fAnchorY, fAnchorX, fAnchorY);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void mouseDrag( SelectAreaTracker this,  MouseEvent e,   int x,   int y) {
        super.mouseDrag(e, x, y);
        eraseRubberBand();
        rubberBand(fAnchorX, fAnchorY, x, y);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void mouseUp( SelectAreaTracker this,  MouseEvent e,   int x,   int y) {
        super.mouseUp(e, x, y);
        eraseRubberBand();
        // use the strategy to make the proper selection.
        rubberBandSelectionStrategy.selectGroup(editor().drawing(), selectionRectangle, e.isShiftDown());
    }

    @org.checkerframework.dataflow.qual.Impure
    private void rubberBand( SelectAreaTracker this,   int x1,   int y1,   int x2,   int y2) {
        selectionRectangle = new Rectangle(new Point(x1, y1));
        selectionRectangle.add(new Point(x2, y2));
        drawXORRect(selectionRectangle);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void eraseRubberBand( SelectAreaTracker this) {
        drawXORRect(selectionRectangle);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void drawXORRect( SelectAreaTracker this,  Rectangle r) {
        DrawingView view = editor().view();
        Graphics g = view.getGraphics();
        g.setXORMode(Color.white);
        g.setColor(Color.black);
        g.drawRect(r.x, r.y, r.width, r.height);
    }
}
