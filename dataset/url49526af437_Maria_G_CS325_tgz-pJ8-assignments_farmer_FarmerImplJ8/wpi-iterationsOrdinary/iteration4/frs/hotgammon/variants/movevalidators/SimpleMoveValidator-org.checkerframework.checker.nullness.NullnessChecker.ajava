package frs.hotgammon.variants.movevalidators;

import frs.hotgammon.*;
import frs.hotgammon.framework.Color;
import frs.hotgammon.framework.Game;
import frs.hotgammon.framework.GameObserver;
import frs.hotgammon.framework.Location;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class SimpleMoveValidator implements MoveValidator {

    private @org.checkerframework.checker.initialization.qual.UnknownInitialization(frs.hotgammon.framework.Game.class) @org.checkerframework.checker.nullness.qual.Nullable Game game;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public SimpleMoveValidator() {
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public SimpleMoveValidator(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Game game) {
        this.setGame(game);
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.game" })
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isValid(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SimpleMoveValidator this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Location from, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Location to) {
        int fromCount = game.getCount(from);
        int toCount = game.getCount(to);
        Color fromColor = game.getColor(from);
        Color toColor = game.getColor(to);
        Color playerInTurn = game.getPlayerInTurn();
        if (from == to) {
            return false;
        }
        if (fromColor != playerInTurn) {
            //Can't move opponent's piece
            //Notify Observers
            for (GameObserver gO : this.game.getObservers()) {
                gO.setStatus("Invalid Move: Can not move opponent's piece. " + this.game.getPlayerInTurn().toString() + " has " + this.game.getNumberOfMovesLeft() + " moves left...");
            }
            //
            return false;
        }
        if (fromCount == 0) {
            //Can't move piece if no pieces
            //Notify Observers
            for (GameObserver gO : this.game.getObservers()) {
                gO.setStatus("Invalid Move: Can not move from an empty location. " + this.game.getPlayerInTurn().toString() + " has " + this.game.getNumberOfMovesLeft() + " moves left...");
            }
            //
            return false;
        }
        if (toCount > 0) {
            //toSquare is not empty
            if (toColor != playerInTurn && toColor != Color.NONE) {
                //If to square is occupied by the opponent
                //Notify Observers
                for (GameObserver gO : this.game.getObservers()) {
                    gO.setStatus("Invalid Move: Can not move to an occupied location. " + this.game.getPlayerInTurn().toString() + " has " + this.game.getNumberOfMovesLeft() + " moves left...");
                }
                //
                return false;
            }
        }
        return true;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.game" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void setGame(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SimpleMoveValidator this, @org.checkerframework.checker.initialization.qual.UnknownInitialization(java.lang.Object.class) @org.checkerframework.checker.nullness.qual.Nullable Game game) {
        this.game = game;
    }
}
