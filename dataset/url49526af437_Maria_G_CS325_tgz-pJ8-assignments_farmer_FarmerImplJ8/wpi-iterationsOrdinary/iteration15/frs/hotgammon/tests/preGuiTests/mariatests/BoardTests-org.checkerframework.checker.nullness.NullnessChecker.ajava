package frs.hotgammon.tests.preGuiTests.mariatests;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import frs.hotgammon.Board;
import frs.hotgammon.common.BoardImpl;
import frs.hotgammon.framework.Color;
import frs.hotgammon.framework.Location;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class BoardTests {

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Board board;

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.board" })
    @org.checkerframework.dataflow.qual.Impure
    public void setUp() {
        board = new BoardImpl();
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.board" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldGetCount0AtStartOfGame() {
        assertEquals("Count should have been 0.", 0, board.getCountAt(Location.R1));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.board" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldGetNoColorAtStartOfGame() {
        assertEquals("Color should have been NONE.", Color.NONE, board.getColorAt(Location.R1));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.board" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldAddOneRedPieceToSquareAtIndex1() {
        boolean wasAdded = board.place(Color.RED, Location.R1.ordinal());
        assertTrue("Should have been able to add a red piece to a new board", wasAdded);
        assertEquals("Count should have been 1.", 1, board.getCountAt(Location.R1));
        assertEquals("Color should have been Red.", Color.RED, board.getColorAt(Location.R1));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.board" })
    @org.checkerframework.dataflow.qual.Impure
    public void shouldBeAbleToMoveToNewLocation() {
        board.place(Color.RED, Location.R1.ordinal());
        assertTrue(board.move(Location.R1, Location.R2, Color.RED));
    }
}
