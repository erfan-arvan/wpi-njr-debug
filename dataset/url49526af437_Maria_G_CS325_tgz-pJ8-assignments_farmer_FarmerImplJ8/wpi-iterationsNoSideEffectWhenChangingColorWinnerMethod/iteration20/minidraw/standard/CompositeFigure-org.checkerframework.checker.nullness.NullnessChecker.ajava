package minidraw.standard;

import minidraw.framework.*;
import java.util.*;
import java.awt.Graphics;

/**
 * A Figure that is composed of several figures.
 *
 * Implementation based on JHotDraw 5.1
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public abstract class CompositeFigure extends AbstractFigure implements FigureChangeListener {

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Figure> fFigures;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public CompositeFigure() {
        fFigures = new ArrayList<Figure>();
    }

    @org.checkerframework.dataflow.qual.Impure
    public synchronized @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Figure add(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Figure figure) {
        if (!fFigures.contains(figure)) {
            fFigures.add(figure);
            figure.addFigureChangeListener(this);
            figure.changed();
        }
        return figure;
    }

    @org.checkerframework.dataflow.qual.Impure
    public synchronized @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Figure remove(Figure figure) {
        if (fFigures.contains(figure)) {
            fFigures.remove(figure);
            figure.changed();
            figure.removeFigureChangeListener(this);
        }
        return figure;
    }

    /**
     * NOTE: Iteration is not thread safe. If you
     *      modify in one thread and iterate in another
     *      you must 'lock' the drawing while iteration occurs.
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Iterator<Figure> iterator() {
        return fFigures.iterator();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Figure findFigure( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int y) {
        // Figures are drawn in order 0..size of fFigures,
        // which means that last added figure is on top.
        // Thus to find the "right" figure when they overlap
        // we must iterate backwards (otherwise the user
        // clicks a figure but gets any figure behind it).
        Figure found = null;
        // doing it the old raw way
        int i = fFigures.size() - 1;
        while (i >= 0) {
            Figure f = fFigures.get(i);
            if (f.displayBox().contains(x, y)) {
                found = f;
                break;
            }
            i--;
        }
        return found;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void draw(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CompositeFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Graphics g) {
        for (Figure f : fFigures) {
            f.draw(g);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void basicMoveBy(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CompositeFigure this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int dx,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int dy) {
        for (Figure f : fFigures) {
            f.moveBy(dx, dy);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void figureInvalidated(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CompositeFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FigureChangeEvent e) {
    }

    @org.checkerframework.dataflow.qual.Impure
    public void figureChanged(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CompositeFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FigureChangeEvent e) {
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void figureRemoved(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CompositeFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FigureChangeEvent e) {
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void figureRequestRemove(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CompositeFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FigureChangeEvent e) {
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void figureRequestUpdate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull CompositeFigure this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FigureChangeEvent e) {
    }
}
