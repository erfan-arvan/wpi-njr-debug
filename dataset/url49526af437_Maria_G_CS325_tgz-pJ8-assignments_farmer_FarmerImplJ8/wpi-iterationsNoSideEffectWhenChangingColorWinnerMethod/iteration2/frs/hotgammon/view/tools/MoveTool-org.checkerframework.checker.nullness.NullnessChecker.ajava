package frs.hotgammon.view.tools;

import java.awt.Point;
import java.awt.event.MouseEvent;
import frs.hotgammon.framework.Color;
import frs.hotgammon.framework.Game;
import frs.hotgammon.framework.GameObserver;
import frs.hotgammon.framework.Location;
import frs.hotgammon.view.Convert;
import frs.hotgammon.view.figures.CheckerFigure;
import minidraw.framework.Drawing;
import minidraw.framework.DrawingEditor;
import minidraw.framework.Figure;
import minidraw.framework.Tool;
import minidraw.standard.AbstractTool;
import minidraw.standard.NullTool;
import minidraw.standard.handlers.DragTracker;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class MoveTool extends AbstractTool {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Game game;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DrawingEditor editor;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Point originalPt;

    /**
     * Subtool to delegate to. The selection tool is in itself
     *    a state tool that may be in one of several states given
     *    by the sub tool.
     *    Class Invariant: fChild tool is never null
     */
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tool fChild;

    /**
     * helper null tool to avoid creating and destroying objects
     *    all the time
     */
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tool cachedNullTool;

    /**
     * the figure that is being dragged. If null then its operation
     *     is not that of dragging a figure (or a set of figures)
     */
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Figure draggedFigure;

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.draggedFigure" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    public MoveTool(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DrawingEditor editor, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Game game) {
        super(editor);
        this.editor = editor;
        this.game = game;
        fChild = cachedNullTool = new NullTool();
        draggedFigure = null;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isCheckerFigure(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Figure f) {
        return f != null && (f instanceof CheckerFigure);
    }

    /**
     * Handles mouse down events and starts the corresponding tracker.
     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.draggedFigure" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void mouseDown(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MoveTool this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MouseEvent e,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int y) {
        Drawing model = editor.drawing();
        model.lock();
        draggedFigure = model.findFigure(e.getX(), e.getY());
        model.unlock();
        if (isCheckerFigure(draggedFigure)) {
            fChild = createDragTracker(draggedFigure);
            originalPt = new Point(e.getX(), e.getY());
        } else {
            //Notify Observers
            for (GameObserver gO : this.game.getObservers()) {
                gO.setStatus("It is " + this.game.getPlayerInTurn().toString() + "'s turn, you must move " + this.game.getNumberOfMovesLeft() + " checker(s)");
            }
            //
        }
        fChild.mouseDown(e, x, y);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void mouseDrag(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MoveTool this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MouseEvent e,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int y) {
        fChild.mouseDrag(e, x, y);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void mouseMove(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MoveTool this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MouseEvent e,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int y) {
        fChild.mouseMove(e, x, y);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.draggedFigure" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void mouseUp(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MoveTool this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MouseEvent e,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int y) {
        if (isCheckerFigure(draggedFigure)) {
            Location from = Convert.xy2Location(originalPt.x, originalPt.y);
            Location to = Convert.xy2Location(e.getX(), e.getY());
            draggedFigure.moveBy(originalPt.x - e.getX(), originalPt.y - e.getY());
            if (isLocation(to) && isLocation(from)) {
                if (game.move(from, to)) {
                    Point pTo = Convert.locationAndCount2xy(to, (game.getCount(to) - 1));
                    Point pFrom = Convert.locationAndCount2xy(from, game.getCount(from));
                    draggedFigure.moveBy(pTo.x - pFrom.x, pTo.y - pFrom.y);
                }
            }
        }
        fChild.mouseUp(e, x, y);
        fChild = cachedNullTool;
        draggedFigure = null;
    }

    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.draggedFigure" })
    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.originalPt" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isLocation(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Location loc) {
        if (loc == null) {
            return false;
        }
        for (Location location : Location.values()) {
            if (loc.equals(location)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Factory method to create a Drag tracker. It is used to drag a figure.
     */
    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.draggedFigure" })
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.originalPt" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Tool createDragTracker(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Figure f) {
        return new DragTracker(editor, f);
    }
}
