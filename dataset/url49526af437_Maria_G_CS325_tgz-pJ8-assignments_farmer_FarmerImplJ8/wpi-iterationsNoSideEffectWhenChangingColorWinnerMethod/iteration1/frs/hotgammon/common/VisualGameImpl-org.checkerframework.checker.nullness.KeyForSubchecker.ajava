package frs.hotgammon.common;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import frs.hotgammon.Board;
import frs.hotgammon.MonFactory;
import frs.hotgammon.MoveValidator;
import frs.hotgammon.RollDeterminer;
import frs.hotgammon.TurnDeterminer;
import frs.hotgammon.WinnerDeterminer;
import frs.hotgammon.framework.Color;
import frs.hotgammon.framework.Game;
import frs.hotgammon.framework.GameObserver;
import frs.hotgammon.framework.Location;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class VisualGameImpl implements Game {

    private  Board gameBoard;

    private  Color playerInTurn;

    private  List<Integer> diceRoll;

    protected   int movesLeft;

    private   int turns;

    private  MoveValidator moveValidator;

    private  WinnerDeterminer winnerDeterminer;

    private  TurnDeterminer turnDeterminer;

    private  RollDeterminer diceRollDeterminer;

    private  ArrayList<GameObserver> observers = new ArrayList<GameObserver>();

    //Added
    private  ArrayList<MoveRecord> turnMoves;

    private   int turnMovesIdx;

    //
    @org.checkerframework.dataflow.qual.Impure
    public VisualGameImpl(MoveValidator mValidator, WinnerDeterminer wDeterminer, TurnDeterminer tDeterminer, RollDeterminer drDeterminer) {
        mValidator.setGame(this);
        wDeterminer.setGame(this);
        tDeterminer.setGame(this);
        moveValidator = mValidator;
        winnerDeterminer = wDeterminer;
        turnDeterminer = tDeterminer;
        diceRollDeterminer = drDeterminer;
    }

    @org.checkerframework.dataflow.qual.Impure
    public VisualGameImpl( MonFactory factory) {
        setFactory(factory);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setFactory( VisualGameImpl this,  MonFactory factory) {
        factory.setGame(this);
        moveValidator = factory.createMoveValidator();
        winnerDeterminer = factory.createWinnerDeterminer();
        turnDeterminer = factory.createTurnDeterminer();
        diceRollDeterminer = factory.createRollDeterminer();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void newGame( VisualGameImpl this) {
        gameBoard = new BoardImpl();
        diceRollDeterminer.reset();
        playerInTurn = Color.NONE;
        turns = 0;
        configure(new Placement[] { // B1 = 2 red
        new Placement(Color.RED, Location.B1), new Placement(Color.RED, Location.B1), // B6 = 5 black
        new Placement(Color.BLACK, Location.B6), new Placement(Color.BLACK, Location.B6), new Placement(Color.BLACK, Location.B6), new Placement(Color.BLACK, Location.B6), new Placement(Color.BLACK, Location.B6), // B8 = 3 black
        new Placement(Color.BLACK, Location.B8), new Placement(Color.BLACK, Location.B8), new Placement(Color.BLACK, Location.B8), // B12 = 5 red
        new Placement(Color.RED, Location.B12), new Placement(Color.RED, Location.B12), new Placement(Color.RED, Location.B12), new Placement(Color.RED, Location.B12), new Placement(Color.RED, Location.B12), // R12 = 5 black
        new Placement(Color.BLACK, Location.R12), new Placement(Color.BLACK, Location.R12), new Placement(Color.BLACK, Location.R12), new Placement(Color.BLACK, Location.R12), new Placement(Color.BLACK, Location.R12), // R8 = 3 red
        new Placement(Color.RED, Location.R8), new Placement(Color.RED, Location.R8), new Placement(Color.RED, Location.R8), // R6 = 5 red
        new Placement(Color.RED, Location.R6), new Placement(Color.RED, Location.R6), new Placement(Color.RED, Location.R6), new Placement(Color.RED, Location.R6), new Placement(Color.RED, Location.R6), // R1 = 2 black
        new Placement(Color.BLACK, Location.R1), new Placement(Color.BLACK, Location.R1) });
        //Notify Observers
        notifyObserversOfNewStatus("New Game: Click the dice to roll. Player with the highest dice value goes first!");
        notifyObserversOfDiceRolled(new int[] { 1, 1 });
        //Added
        this.turnMoves = new ArrayList<MoveRecord>();
        this.turnMovesIdx = 0;
        //
    }

    @org.checkerframework.dataflow.qual.Impure
    public void nextTurn( VisualGameImpl this) {
        //Check For Winner
        if (isWinner()) {
            return;
        }
        playerInTurn = turnDeterminer.nextTurn();
        //Roll Dice
        diceRollDeterminer.rollDice();
        int[] dRoll = diceRollDeterminer.getDiceRoll();
        if (turns == 0) {
            while (dRoll.length > 2) {
                diceRollDeterminer.rollDice();
                dRoll = diceRollDeterminer.getDiceRoll();
            }
            playerInTurn = determineStartingPlayer(dRoll);
        }
        //Create diceRoll
        if (dRoll.length == 2) {
            diceRoll = new ArrayList<Integer>(Arrays.asList(dRoll[0], dRoll[1]));
        } else {
            diceRoll = new ArrayList<Integer>(Arrays.asList(dRoll[0], dRoll[1], dRoll[2], dRoll[3]));
        }
        turns++;
        movesLeft = diceRoll.size();
        String statusMessage = "";
        if (turns == 1) {
            statusMessage = playerInTurn.toString() + " rolled the highest value! ";
        }
        //Notify Observers
        statusMessage += getPlayerInTurn().toString() + " has " + getNumberOfMovesLeft() + " moves left...";
        notifyObserversOfNewStatus(statusMessage);
        notifyObserversOfDiceRolled(diceThrown());
        //Added
        this.turnMoves = new ArrayList<MoveRecord>();
        for (int i = 0; i < movesLeft; i++) {
            this.turnMoves.add(new MoveRecord());
        }
        this.turnMovesIdx = 0;
        //
    }

    @org.checkerframework.dataflow.qual.Pure
    private  Color determineStartingPlayer( VisualGameImpl this,   int  [] dRoll) {
        return (dRoll[0] > dRoll[1]) ? Color.RED : Color.BLACK;
    }

    @org.checkerframework.dataflow.qual.Impure
    private void moveDuringConfigure( VisualGameImpl this,  Location from,  Location to) {
        Color checkerColor = (from == Location.R_BEAR_OFF) ? Color.RED : Color.BLACK;
        gameBoard.move(from, to, checkerColor);
        //Notify Observers
        notifyObserversOfCheckerMove(from, to);
    }

    @org.checkerframework.dataflow.qual.Pure
    private   boolean isConfigureMove( VisualGameImpl this,  Location from,  Location to) {
        return (from == Location.R_BEAR_OFF || from == Location.B_BEAR_OFF) && turns == 0;
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean move( VisualGameImpl this,  Location from,  Location to) {
        ///If from BearOff During Configure call, allow
        if (isConfigureMove(from, to)) {
            moveDuringConfigure(from, to);
            return true;
        }
        //ADDED
        //If move is the reverse of a move previously made during this turn, allow.
        Move m = new Move(from, to);
        if (isMoveBack(m)) {
            executeMoveBack(m);
            return true;
        }
        //ADDED
        //Check for Valid Moves, if none, set movesLeft to 0.
        if (!validMovesExist()) {
            movesLeft = 0;
            //Notify Observers
            notifyObserversOfCheckerMove(from, from);
            notifyObserversOfNewStatus(getPlayerInTurn().toString() + " has no valid moves left...");
            //
            return false;
        }
        ///
        if (movesLeft == 0) {
            //Notify Observers
            notifyObserversOfCheckerMove(from, from);
            notifyObserversOfNewStatus("Invalid Move: " + getPlayerInTurn().toString() + " has 0 moves left...");
            //
            return false;
        }
        if (moveValidator.isValid(from, to)) {
            if (gameBoard.getCountAt(to) == 1 && gameBoard.getColorAt(to) != playerInTurn) {
                moveOpponentToBar(to);
            }
            boolean moveValue = gameBoard.move(from, to, playerInTurn);
            if (moveValue == true) {
                movesLeft--;
                removeDiceValueUsed(from, to);
                //Notify Observers
                notifyObserversOfCheckerMove(from, to);
                notifyObserversOfNewStatus("Valid Move: " + getPlayerInTurn().toString() + " has " + getNumberOfMovesLeft() + " moves left...");
                //
                //ADDED
                this.turnMoves.get(this.turnMovesIdx).setMove(new Move(from, to));
                this.turnMovesIdx++;
                //
            } else {
                //Notify Observers
                notifyObserversOfCheckerMove(from, from);
                notifyObserversOfNewStatus("Invalid Move on GameBoard: " + from.toString() + " to " + to.toString() + ". " + getPlayerInTurn().toString() + " has " + getNumberOfMovesLeft() + " moves left...");
            }
            return moveValue;
        }
        //Notify Observers
        for (GameObserver gO : this.observers) {
            gO.checkerMove(from, from);
        }
        notifyObserversOfCheckerMove(from, from);
        //
        return false;
    }

    //Notify Observers Methods
    @org.checkerframework.dataflow.qual.Impure
    private void notifyObserversOfDiceRolled( VisualGameImpl this,   int  [] diceRolled) {
        for (GameObserver gO : this.observers) {
            gO.diceRolled(diceRolled);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void notifyObserversOfNewStatus( VisualGameImpl this,  String status) {
        for (GameObserver gO : this.observers) {
            gO.setStatus(status);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void notifyObserversOfCheckerMove( VisualGameImpl this,  Location from,  Location to) {
        for (GameObserver gO : this.observers) {
            gO.checkerMove(from, to);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void notifyObserversOfGameOver( VisualGameImpl this) {
        for (GameObserver gO : this.observers) {
            gO.gameOver();
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private   boolean validMovesExist( VisualGameImpl this) {
        List<Integer> diceOptions = diceRoll;
        //Check bar
        Location barOfPlayerInTurn = getBarOfPlayerInTurn();
        int barCount = getCount(barOfPlayerInTurn);
        if (barCount > 0) {
            for (int j = 0; j < diceOptions.size(); j++) {
                Location to = getToLocationFromBar(diceOptions.get(j));
                if (moveValidator.isValid(barOfPlayerInTurn, to)) {
                    return true;
                }
            }
        } else //Check Rest of Locations if Bar is empty
        {
            for (Location frmLoc : Location.values()) {
                if (getCount(frmLoc) > 0 && getColor(frmLoc) == playerInTurn) {
                    for (int j = 0; j < diceOptions.size(); j++) {
                        Location to = Location.findLocation(playerInTurn, frmLoc, diceOptions.get(j));
                        if (moveValidator.isValid(frmLoc, to)) {
                            return true;
                        }
                    }
                }
            }
        }
        //No valid moves:
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    private  Location getBarOfPlayerInTurn( VisualGameImpl this) {
        return (playerInTurn == Color.BLACK) ? Location.B_BAR : Location.R_BAR;
    }

    @org.checkerframework.dataflow.qual.Pure
    private  Location getToLocationFromBar( VisualGameImpl this,   int dValue) {
        List<Location> redInnerTable = Arrays.asList(Location.R1, Location.R2, Location.R3, Location.R4, Location.R5, Location.R6);
        List<Location> blackInnerTable = Arrays.asList(Location.B1, Location.B2, Location.B3, Location.B4, Location.B5, Location.B6);
        List<Location> destinationInnerTable = (playerInTurn == Color.BLACK) ? redInnerTable : blackInnerTable;
        return destinationInnerTable.get(dValue - 1);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Color getPlayerInTurn( VisualGameImpl this) {
        return playerInTurn;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getNumberOfMovesLeft( VisualGameImpl this) {
        return movesLeft;
    }

    //DICE_ROLLS[diceRollIdx]; }
    @org.checkerframework.dataflow.qual.Impure
    public   int  [] diceThrown( VisualGameImpl this) {
        return diceRollDeterminer.getDiceRoll();
    }

    @org.checkerframework.dataflow.qual.Impure
    public   int  [] diceValuesLeft( VisualGameImpl this) {
        int[] diceRollArr = new int[diceRoll.size()];
        for (int i = 0; i < diceRollArr.length; i++) {
            diceRollArr[i] = diceRoll.get(i);
        }
        return diceRollArr;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Color winner( VisualGameImpl this) {
        return winnerDeterminer.winner(turns);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Color getColor( VisualGameImpl this,  Location location) {
        return gameBoard.getColorAt(location);
    }

    @org.checkerframework.dataflow.qual.Impure
    public   int getCount( VisualGameImpl this,  Location location) {
        return gameBoard.getCountAt(location);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void removeDiceValueUsed( VisualGameImpl this,  Location from,  Location to) {
        //(playerInTurn == Color.BLACK) ? rawDistanceTravelled : -1 * (rawDistanceTravelled);
        int diceValueUsed = (playerInTurn == Color.BLACK) ? Location.distance(from, to) : (-1 * Location.distance(from, to));
        int remIdx = diceRoll.indexOf(diceValueUsed);
        if (remIdx < 0) {
            remIdx = 0;
        }
        diceRoll.remove(remIdx);
        //Added
        this.turnMoves.get(this.turnMovesIdx).setDieValueUsed(diceValueUsed);
        //
    }

    @org.checkerframework.dataflow.qual.Impure
    private void moveOpponentToBar( VisualGameImpl this,  Location opponentLoc) {
        Color colorOfOpponent = opponentColor();
        Location otherPlayerBar = otherPlayerBar();
        gameBoard.place(colorOfOpponent, otherPlayerBar.ordinal());
        gameBoard.remove(colorOfOpponent, opponentLoc.ordinal());
        //Notify Observers
        notifyObserversOfCheckerMove(opponentLoc, otherPlayerBar);
        //
        //Added
        Move aMove = new Move(opponentLoc, otherPlayerBar);
        this.turnMoves.get(this.turnMovesIdx).setAssociatedMoveToBar(aMove);
        //
    }

    @org.checkerframework.dataflow.qual.Impure
    protected  Location otherPlayerBar( VisualGameImpl this) {
        Color colorOfOpponent = opponentColor();
        return (colorOfOpponent == Color.BLACK) ? Location.B_BAR : Location.R_BAR;
    }

    @org.checkerframework.dataflow.qual.Pure
    private  Color opponentColor( VisualGameImpl this) {
        if (playerInTurn == Color.NONE) {
            return Color.NONE;
        }
        return (playerInTurn == Color.RED) ? Color.BLACK : Color.RED;
    }

    static public class Placement {

        public  Location location;

        public  Color player;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public Placement( Color player,  Location location) {
            this.player = player;
            this.location = location;
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void configure( VisualGameImpl this,  Placement  [] placements) {
        gameBoard = new BoardImpl();
        for (int i = 0; i < placements.length; i++) {
            //gameBoard.place(placements[i].player, placements[i].location.ordinal());
            Location from = getPlayerBearOff(placements[i].player);
            gameBoard.place(placements[i].player, from.ordinal());
            move(from, placements[i].location);
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    private  Location getPlayerBearOff( VisualGameImpl this,  Color player) {
        return (player == Color.BLACK) ? Location.B_BEAR_OFF : Location.R_BEAR_OFF;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void addObserver( VisualGameImpl this,  GameObserver observer) {
        this.observers.add(observer);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  ArrayList<GameObserver> getObservers( VisualGameImpl this) {
        return this.observers;
    }

    @org.checkerframework.dataflow.qual.Impure
    private   boolean isWinner( VisualGameImpl this) {
        Color winner = winner();
        if (!winner.equals(Color.NONE)) {
            //Notify Observers
            notifyObserversOfNewStatus(winner + " is the WINNER!");
            notifyObserversOfGameOver();
            //
            return true;
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.Impure
    private   boolean isMoveBack( VisualGameImpl this,  Move m) {
        if (getIdxOfInTurnMoves(m) == -1) {
            return false;
        }
        return true;
    }

    @org.checkerframework.dataflow.qual.Impure
    private   int getIdxOfInTurnMoves( VisualGameImpl this,  Move m) {
        for (int i = 0; i < this.turnMoves.size(); i++) {
            MoveRecord mR = this.turnMoves.get(i);
            Move mRMove = mR.getMove();
            if (mRMove != null) {
                if (mRMove.isReverse(m)) {
                    return i;
                }
            }
        }
        return -1;
    }

    @org.checkerframework.dataflow.qual.Impure
    private void executeMoveBack( VisualGameImpl this,  Move m) {
        int idx = getIdxOfInTurnMoves(m);
        MoveRecord mRec = this.turnMoves.get(idx);
        gameBoard.move(m.getFrom(), m.getTo(), getColor(m.getFrom()));
        //Add back used diceValue
        diceRoll.add(mRec.getDieValueUsed());
        //Add +1 to movesLeft
        movesLeft++;
        //Notify Observers
        //Move Back
        notifyObserversOfCheckerMove(m.to, m.from);
        //Move Back from Bar if needed
        Move associatedMove = mRec.getAssociatedMoveToBar();
        if (associatedMove != null) {
            notifyObserversOfCheckerMove(associatedMove.to, associatedMove.from);
        }
        notifyObserversOfNewStatus("Checker returned to previous position, " + getPlayerInTurn() + " has " + getNumberOfMovesLeft() + " moves left...");
        //
        //Remove mRec
        removeMoverRecordAt(idx);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void removeMoverRecordAt( VisualGameImpl this,   int idx) {
        this.turnMoves.remove(idx);
        this.turnMoves.add(new MoveRecord());
        this.turnMovesIdx--;
    }

    public static class Move {

        private  Location from;

        private  Location to;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public Move( Location from,  Location to) {
            this.from = from;
            this.to = to;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Location getTo( Move this) {
            return to;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Location getFrom( Move this) {
            return from;
        }

        @org.checkerframework.dataflow.qual.Pure
        public   boolean isEqual(Move reverse) {
            return (reverse.from == from) && (reverse.to == to);
        }

        @org.checkerframework.dataflow.qual.Pure
        public   boolean isReverse( Move this,  Move reverse) {
            return (reverse.from == to) && (reverse.to == from);
        }

        @org.checkerframework.dataflow.qual.Pure
        public   boolean isEqual(Location otherFrom, Location otherTo) {
            return (otherFrom == from) && (otherTo == to);
        }

        @org.checkerframework.dataflow.qual.Pure
        public   boolean isReverse(Location otherFrom, Location otherTo) {
            return (otherFrom == to) && (otherTo == from);
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Move reverse() {
            return new Move(to, from);
        }

        @org.checkerframework.dataflow.qual.Pure
        public  String toString( Move this) {
            return "(" + from.toString() + "," + to.toString() + ")";
        }
    }

    public static class MoveRecord {

        private  Move move;

        private  Move associatedMoveToBar;

        private   int dieValueUsed;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public MoveRecord() {
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public MoveRecord(Move move, Move associatedMove, int dieValue) {
            this.move = move;
            this.associatedMoveToBar = associatedMove;
            this.dieValueUsed = dieValue;
        }

        @org.checkerframework.dataflow.qual.Impure
        public void setMove( MoveRecord this,  Move m) {
            this.move = m;
        }

        @org.checkerframework.dataflow.qual.Impure
        public void setAssociatedMoveToBar( MoveRecord this,  Move m) {
            this.associatedMoveToBar = m;
        }

        @org.checkerframework.dataflow.qual.Impure
        public void setDieValueUsed( MoveRecord this,   int dV) {
            this.dieValueUsed = dV;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Move getMove( MoveRecord this) {
            return this.move;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Move getAssociatedMoveToBar( MoveRecord this) {
            return this.associatedMoveToBar;
        }

        @org.checkerframework.dataflow.qual.Pure
        public   int getDieValueUsed( MoveRecord this) {
            return this.dieValueUsed;
        }
    }
}
