package frs.hotgammon.common;

import frs.hotgammon.Board;
import frs.hotgammon.framework.Color;
import frs.hotgammon.framework.Location;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class BoardImpl implements Board {

    private final   int SQUARES_ON_BOARD = 28;

    private  Square  [] board = new Square[SQUARES_ON_BOARD];

    @org.checkerframework.dataflow.qual.Impure
    public BoardImpl() {
        for (int i = 0; i < SQUARES_ON_BOARD; i++) {
            board[i] = new Square();
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public BoardImpl(  int squaresOnBoard) {
        for (int i = 0; i < squaresOnBoard; i++) {
            board[i] = new Square();
        }
    }

    /* (non-Javadoc)
	 * @see frs.hotgammon.BoardInter#move(frs.hotgammon.Location, frs.hotgammon.Location, frs.hotgammon.Color)
	 */
    @org.checkerframework.dataflow.qual.Impure
    public   boolean move( BoardImpl this,  Location from,  Location to,  Color playerInTurn) {
        boolean rem = remove(playerInTurn, from.ordinal());
        boolean add = place(playerInTurn, to.ordinal());
        return (rem && add);
    }

    /* (non-Javadoc)
	 * @see frs.hotgammon.BoardInter#getCountAt(frs.hotgammon.Location)
	 */
    @org.checkerframework.dataflow.qual.Impure
    public   int getCountAt( BoardImpl this,  Location loc) {
        return board[loc.ordinal()].getCount();
    }

    /* (non-Javadoc)
	 * @see frs.hotgammon.BoardInter#getColorAt(frs.hotgammon.Location)
	 */
    @org.checkerframework.dataflow.qual.Impure
    public  Color getColorAt( BoardImpl this,  Location loc) {
        return board[loc.ordinal()].getColor();
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean place( BoardImpl this,  Color col,   int index) {
        if (index > -1 && index < SQUARES_ON_BOARD) {
            board[index].add(col);
            return true;
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean remove( BoardImpl this,  Color col,   int index) {
        if (index > -1 && index < SQUARES_ON_BOARD) {
            if (board[index].color == col) {
                board[index].remove(col);
                return true;
            }
        }
        return false;
    }

    public class Square {

        public   int occupants = 0;

        private  Color color = Color.NONE;

        @org.checkerframework.dataflow.qual.Impure
        public   boolean add( Square this,  Color col) {
            if (this.color == Color.NONE || this.color == col) {
                this.color = col;
                this.occupants++;
                return true;
            }
            return false;
        }

        @org.checkerframework.dataflow.qual.Impure
        public   boolean remove( Square this,  Color col) {
            if (this.color == col && this.occupants > 0) {
                this.occupants--;
                if (this.occupants == 0) {
                    this.color = Color.NONE;
                }
                return true;
            }
            return false;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Color getColor( Square this) {
            return this.color;
        }

        @org.checkerframework.dataflow.qual.Pure
        public   int getCount( Square this) {
            return this.occupants;
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Square getSquare( BoardImpl this,   int ordinal) {
        return board[ordinal];
    }
}
