package frs.hotgammon.tests.preGuiTests.stubs;

import frs.hotgammon.RollDeterminer;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class FixedRedStartsRandomRollDeterminer implements RollDeterminer {

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] diceRoll = new int[2];

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] POSSIBLE_DICE_ROLLS = { { 4, 3 }, { 4, 3 }, { 1, 1 }, { 3, 6 } };

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int index = 0;

    @org.checkerframework.dataflow.qual.Impure
    public void rollDice(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FixedRedStartsRandomRollDeterminer this) {
        diceRoll = POSSIBLE_DICE_ROLLS[index % 4];
        if (diceRoll[0] == diceRoll[1]) {
            diceRoll = new int[] { diceRoll[0], diceRoll[1], diceRoll[0], diceRoll[1] };
        }
        index++;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] getDiceRoll(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FixedRedStartsRandomRollDeterminer this) {
        return diceRoll;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void reset(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FixedRedStartsRandomRollDeterminer this) {
        diceRoll = new int[2];
        index = 0;
    }
}
