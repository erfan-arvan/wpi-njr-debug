package assignments.frs.chap5;

import assignments.frs.chap5.Breakthrough.PieceType;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Board {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PieceType @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] gameBoard = new PieceType[8][8];

    @org.checkerframework.dataflow.qual.Impure
    public Board() {
        for (int col = 0; col < 8; col++) {
            for (int row = 0; row < 2; row++) {
                gameBoard[row][col] = PieceType.BLACK;
            }
            for (int row = 2; row < 6; row++) {
                gameBoard[row][col] = PieceType.NONE;
            }
            for (int row = 6; row < 8; row++) {
                gameBoard[row][col] = PieceType.WHITE;
            }
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PieceType get( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int row,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int col) {
        return gameBoard[row][col];
    }

    @org.checkerframework.dataflow.qual.Impure
    public void set( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int row,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int col, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PieceType pt) {
        gameBoard[row][col] = pt;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void print() {
        System.out.println("GAMEBOARD ::: ");
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (gameBoard[i][j] == PieceType.WHITE) {
                    System.out.print("(" + i + "," + j + ")W ");
                } else if (gameBoard[i][j] == PieceType.BLACK) {
                    System.out.print("(" + i + "," + j + ")B ");
                } else if (gameBoard[i][j] == PieceType.NONE) {
                    System.out.print("(" + i + "," + j + ")_ ");
                }
            }
            System.out.println();
        }
        System.out.println();
        System.out.println();
    }
}
