package assignments.farmer;

import assignments.farmer.actionstrategies.*;
import assignments.farmer.farmerfactories.*;
import assignments.farmer.seasonstates.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class FarmerImpl implements Farmer {

    private  SeasonState season = new SpringState();

    private  PlowStrategy plowStrategy;

    private  PlantStrategy plantStrategy;

    private  WeedControlStrategy weedControlStrategy;

    private  HarvestStrategy harvestStrategy;

    private  MarketStrategy marketStrategy;

    @org.checkerframework.dataflow.qual.Impure
    public void plow( FarmerImpl this) {
        season.plow(plowStrategy);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void plant( FarmerImpl this) {
        season.plant(plantStrategy);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void weedControl( FarmerImpl this) {
        season.weedControl(weedControlStrategy);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void harvest( FarmerImpl this) {
        season.harvest(harvestStrategy);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void market( FarmerImpl this) {
        season.market(marketStrategy);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setSeasonState( FarmerImpl this,  SeasonState seasonState) {
        this.season = seasonState;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setStrategies( FarmerImpl this,  PlowStrategy plowStrategy,  PlantStrategy plantStrategy,  WeedControlStrategy weedControlStrategy,  HarvestStrategy harvestStrategy,  MarketStrategy marketStrategy) {
        this.plowStrategy = plowStrategy;
        this.plantStrategy = plantStrategy;
        this.weedControlStrategy = weedControlStrategy;
        this.harvestStrategy = harvestStrategy;
        this.marketStrategy = marketStrategy;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) {
        Farmer[] farmers = { new AmishFarmerFactory().create("Amish"), new OrganicFarmerFactory().create("Organic"), new ConventionalFarmerFactory().create("Conv") };
        SeasonState[] seasons = { new SummerState(), new FallState(), new SpringState() };
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    farmers[j].plow();
                    farmers[j].plant();
                    farmers[j].weedControl();
                    farmers[j].harvest();
                    farmers[j].market();
                    farmers[j].setSeasonState(seasons[k]);
                }
            }
        }
    }
}
